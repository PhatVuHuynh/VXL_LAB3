
LED_ANIMATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080027e4  080027e4  000127e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002808  08002808  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08002808  08002808  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002808  08002808  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002808  08002808  00012808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800280c  0800280c  0001280c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08002810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000058  08002868  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002868  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000903c  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001964  00000000  00000000  000290bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  0002aa28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f8  00000000  00000000  0002b408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016919  00000000  00000000  0002bd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9c4  00000000  00000000  00042619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082312  00000000  00000000  0004dfdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d02ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002774  00000000  00000000  000d0344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000058 	.word	0x20000058
 8000128:	00000000 	.word	0x00000000
 800012c:	080027cc 	.word	0x080027cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000005c 	.word	0x2000005c
 8000148:	080027cc 	.word	0x080027cc

0800014c <subKeyProcess>:
int keyReg2[3] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};

int preState[3] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int TimerForKeyPress = 200;

void subKeyProcess(int id){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOA, A5_Pin);
	key_flag[id] = 1;
 8000154:	4a04      	ldr	r2, [pc, #16]	; (8000168 <subKeyProcess+0x1c>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	2101      	movs	r1, #1
 800015a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800015e:	bf00      	nop
 8000160:	370c      	adds	r7, #12
 8000162:	46bd      	mov	sp, r7
 8000164:	bc80      	pop	{r7}
 8000166:	4770      	bx	lr
 8000168:	20000074 	.word	0x20000074

0800016c <is_Pressed>:

int is_Pressed(int id){
 800016c:	b480      	push	{r7}
 800016e:	b083      	sub	sp, #12
 8000170:	af00      	add	r7, sp, #0
 8000172:	6078      	str	r0, [r7, #4]
	if(key_flag[id]){
 8000174:	4a09      	ldr	r2, [pc, #36]	; (800019c <is_Pressed+0x30>)
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800017c:	2b00      	cmp	r3, #0
 800017e:	d006      	beq.n	800018e <is_Pressed+0x22>
		key_flag[id] = 0;
 8000180:	4a06      	ldr	r2, [pc, #24]	; (800019c <is_Pressed+0x30>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2100      	movs	r1, #0
 8000186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800018a:	2301      	movs	r3, #1
 800018c:	e000      	b.n	8000190 <is_Pressed+0x24>
	}
	return 0;
 800018e:	2300      	movs	r3, #0
}
 8000190:	4618      	mov	r0, r3
 8000192:	370c      	adds	r7, #12
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	20000074 	.word	0x20000074

080001a0 <getKeyInput>:
//		if(led_id == A7_Pin) HAL_GPIO_WritePin(GPIOA, A0_Pin, 1);
//		else HAL_GPIO_WritePin(GPIOA, led_id + 1, 1);
//	}
//}

void getKeyInput(int id, uint16_t BUTTON){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
 80001a8:	460b      	mov	r3, r1
 80001aa:	807b      	strh	r3, [r7, #2]
	keyReg0[id] = keyReg1[id];
 80001ac:	4a33      	ldr	r2, [pc, #204]	; (800027c <getKeyInput+0xdc>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4932      	ldr	r1, [pc, #200]	; (8000280 <getKeyInput+0xe0>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg1[id] = keyReg2[id];
 80001bc:	4a31      	ldr	r2, [pc, #196]	; (8000284 <getKeyInput+0xe4>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	492d      	ldr	r1, [pc, #180]	; (800027c <getKeyInput+0xdc>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg2[id] = HAL_GPIO_ReadPin(GPIOB, BUTTON);
 80001cc:	887b      	ldrh	r3, [r7, #2]
 80001ce:	4619      	mov	r1, r3
 80001d0:	482d      	ldr	r0, [pc, #180]	; (8000288 <getKeyInput+0xe8>)
 80001d2:	f001 fac3 	bl	800175c <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	4619      	mov	r1, r3
 80001da:	4a2a      	ldr	r2, [pc, #168]	; (8000284 <getKeyInput+0xe4>)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if(keyReg0[id] == keyReg1[id] && keyReg1[id] == keyReg2[id]){
 80001e2:	4a27      	ldr	r2, [pc, #156]	; (8000280 <getKeyInput+0xe0>)
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001ea:	4924      	ldr	r1, [pc, #144]	; (800027c <getKeyInput+0xdc>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001f2:	429a      	cmp	r2, r3
 80001f4:	d13d      	bne.n	8000272 <getKeyInput+0xd2>
 80001f6:	4a21      	ldr	r2, [pc, #132]	; (800027c <getKeyInput+0xdc>)
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001fe:	4921      	ldr	r1, [pc, #132]	; (8000284 <getKeyInput+0xe4>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000206:	429a      	cmp	r2, r3
 8000208:	d133      	bne.n	8000272 <getKeyInput+0xd2>
		if(keyReg2[id] != preState[id]){
 800020a:	4a1e      	ldr	r2, [pc, #120]	; (8000284 <getKeyInput+0xe4>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000212:	491e      	ldr	r1, [pc, #120]	; (800028c <getKeyInput+0xec>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800021a:	429a      	cmp	r2, r3
 800021c:	d014      	beq.n	8000248 <getKeyInput+0xa8>
			preState[id] = keyReg2[id];
 800021e:	4a19      	ldr	r2, [pc, #100]	; (8000284 <getKeyInput+0xe4>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000226:	4919      	ldr	r1, [pc, #100]	; (800028c <getKeyInput+0xec>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			if(keyReg2[id] == PRESS_STATE){
 800022e:	4a15      	ldr	r2, [pc, #84]	; (8000284 <getKeyInput+0xe4>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d11b      	bne.n	8000272 <getKeyInput+0xd2>
				subKeyProcess(id);
 800023a:	6878      	ldr	r0, [r7, #4]
 800023c:	f7ff ff86 	bl	800014c <subKeyProcess>
				//TimerForKeyPress = 200;
				TimerForKeyPress = 50;
 8000240:	4b13      	ldr	r3, [pc, #76]	; (8000290 <getKeyInput+0xf0>)
 8000242:	2232      	movs	r2, #50	; 0x32
 8000244:	601a      	str	r2, [r3, #0]
				//TimerForKeyPress = 200;
				TimerForKeyPress = 50;
			}
		}
	}
};
 8000246:	e014      	b.n	8000272 <getKeyInput+0xd2>
			--TimerForKeyPress;
 8000248:	4b11      	ldr	r3, [pc, #68]	; (8000290 <getKeyInput+0xf0>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	3b01      	subs	r3, #1
 800024e:	4a10      	ldr	r2, [pc, #64]	; (8000290 <getKeyInput+0xf0>)
 8000250:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress <= 0){
 8000252:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <getKeyInput+0xf0>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	dc0b      	bgt.n	8000272 <getKeyInput+0xd2>
				if(keyReg2[id] == PRESS_STATE){
 800025a:	4a0a      	ldr	r2, [pc, #40]	; (8000284 <getKeyInput+0xe4>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d102      	bne.n	800026c <getKeyInput+0xcc>
					subKeyProcess(id);
 8000266:	6878      	ldr	r0, [r7, #4]
 8000268:	f7ff ff70 	bl	800014c <subKeyProcess>
				TimerForKeyPress = 50;
 800026c:	4b08      	ldr	r3, [pc, #32]	; (8000290 <getKeyInput+0xf0>)
 800026e:	2232      	movs	r2, #50	; 0x32
 8000270:	601a      	str	r2, [r3, #0]
};
 8000272:	bf00      	nop
 8000274:	3708      	adds	r7, #8
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	2000000c 	.word	0x2000000c
 8000280:	20000000 	.word	0x20000000
 8000284:	20000018 	.word	0x20000018
 8000288:	40010c00 	.word	0x40010c00
 800028c:	20000024 	.word	0x20000024
 8000290:	20000030 	.word	0x20000030

08000294 <display7SEG>:
        0b1111111, // 8
        0b1101111, // 9
		0b1111001  // E
   };

void display7SEG(uint8_t num){
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	71fb      	strb	r3, [r7, #7]
	    uint8_t displaySegments = segments[num];
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	4a3a      	ldr	r2, [pc, #232]	; (800038c <display7SEG+0xf8>)
 80002a2:	5cd3      	ldrb	r3, [r2, r3]
 80002a4:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(GPIOA, R1_A_Pin, (displaySegments & 1) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80002a6:	7bfb      	ldrb	r3, [r7, #15]
 80002a8:	f003 0301 	and.w	r3, r3, #1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	bf0c      	ite	eq
 80002b0:	2301      	moveq	r3, #1
 80002b2:	2300      	movne	r3, #0
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	461a      	mov	r2, r3
 80002b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002bc:	4834      	ldr	r0, [pc, #208]	; (8000390 <display7SEG+0xfc>)
 80002be:	f001 fa64 	bl	800178a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, R1_B_Pin, ((displaySegments >> 1) & 1) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80002c2:	7bfb      	ldrb	r3, [r7, #15]
 80002c4:	085b      	lsrs	r3, r3, #1
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	f003 0301 	and.w	r3, r3, #1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	bf0c      	ite	eq
 80002d0:	2301      	moveq	r3, #1
 80002d2:	2300      	movne	r3, #0
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	461a      	mov	r2, r3
 80002d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002dc:	482c      	ldr	r0, [pc, #176]	; (8000390 <display7SEG+0xfc>)
 80002de:	f001 fa54 	bl	800178a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, R1_C_Pin, ((displaySegments >> 2) & 1) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80002e2:	7bfb      	ldrb	r3, [r7, #15]
 80002e4:	089b      	lsrs	r3, r3, #2
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	f003 0301 	and.w	r3, r3, #1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	bf0c      	ite	eq
 80002f0:	2301      	moveq	r3, #1
 80002f2:	2300      	movne	r3, #0
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	461a      	mov	r2, r3
 80002f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002fc:	4824      	ldr	r0, [pc, #144]	; (8000390 <display7SEG+0xfc>)
 80002fe:	f001 fa44 	bl	800178a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, R1_D_Pin, ((displaySegments >> 3) & 1) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000302:	7bfb      	ldrb	r3, [r7, #15]
 8000304:	08db      	lsrs	r3, r3, #3
 8000306:	b2db      	uxtb	r3, r3
 8000308:	f003 0301 	and.w	r3, r3, #1
 800030c:	2b00      	cmp	r3, #0
 800030e:	bf0c      	ite	eq
 8000310:	2301      	moveq	r3, #1
 8000312:	2300      	movne	r3, #0
 8000314:	b2db      	uxtb	r3, r3
 8000316:	461a      	mov	r2, r3
 8000318:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800031c:	481c      	ldr	r0, [pc, #112]	; (8000390 <display7SEG+0xfc>)
 800031e:	f001 fa34 	bl	800178a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, R1_E_Pin, ((displaySegments >> 4) & 1) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000322:	7bfb      	ldrb	r3, [r7, #15]
 8000324:	091b      	lsrs	r3, r3, #4
 8000326:	b2db      	uxtb	r3, r3
 8000328:	f003 0301 	and.w	r3, r3, #1
 800032c:	2b00      	cmp	r3, #0
 800032e:	bf0c      	ite	eq
 8000330:	2301      	moveq	r3, #1
 8000332:	2300      	movne	r3, #0
 8000334:	b2db      	uxtb	r3, r3
 8000336:	461a      	mov	r2, r3
 8000338:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800033c:	4814      	ldr	r0, [pc, #80]	; (8000390 <display7SEG+0xfc>)
 800033e:	f001 fa24 	bl	800178a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, R1_F_Pin, ((displaySegments >> 5) & 1) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000342:	7bfb      	ldrb	r3, [r7, #15]
 8000344:	095b      	lsrs	r3, r3, #5
 8000346:	b2db      	uxtb	r3, r3
 8000348:	f003 0301 	and.w	r3, r3, #1
 800034c:	2b00      	cmp	r3, #0
 800034e:	bf0c      	ite	eq
 8000350:	2301      	moveq	r3, #1
 8000352:	2300      	movne	r3, #0
 8000354:	b2db      	uxtb	r3, r3
 8000356:	461a      	mov	r2, r3
 8000358:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800035c:	480c      	ldr	r0, [pc, #48]	; (8000390 <display7SEG+0xfc>)
 800035e:	f001 fa14 	bl	800178a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, R1_G_Pin, ((displaySegments >> 6) & 1) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000362:	7bfb      	ldrb	r3, [r7, #15]
 8000364:	099b      	lsrs	r3, r3, #6
 8000366:	b2db      	uxtb	r3, r3
 8000368:	f003 0301 	and.w	r3, r3, #1
 800036c:	2b00      	cmp	r3, #0
 800036e:	bf0c      	ite	eq
 8000370:	2301      	moveq	r3, #1
 8000372:	2300      	movne	r3, #0
 8000374:	b2db      	uxtb	r3, r3
 8000376:	461a      	mov	r2, r3
 8000378:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800037c:	4804      	ldr	r0, [pc, #16]	; (8000390 <display7SEG+0xfc>)
 800037e:	f001 fa04 	bl	800178a <HAL_GPIO_WritePin>
  }
 8000382:	bf00      	nop
 8000384:	3710      	adds	r7, #16
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	20000040 	.word	0x20000040
 8000390:	40010800 	.word	0x40010800

08000394 <scan7SEG>:

void scan7SEG(uint8_t mode, uint8_t i){
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	460a      	mov	r2, r1
 800039e:	71fb      	strb	r3, [r7, #7]
 80003a0:	4613      	mov	r3, r2
 80003a2:	71bb      	strb	r3, [r7, #6]
	//for(int i = 0; i < 4; ++i){
		if(mode == 0){
 80003a4:	79fb      	ldrb	r3, [r7, #7]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	f040 8084 	bne.w	80004b4 <scan7SEG+0x120>
			switch(i){
 80003ac:	79bb      	ldrb	r3, [r7, #6]
 80003ae:	2b03      	cmp	r3, #3
 80003b0:	d868      	bhi.n	8000484 <scan7SEG+0xf0>
 80003b2:	a201      	add	r2, pc, #4	; (adr r2, 80003b8 <scan7SEG+0x24>)
 80003b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003b8:	080003c9 	.word	0x080003c9
 80003bc:	080003f3 	.word	0x080003f3
 80003c0:	08000427 	.word	0x08000427
 80003c4:	08000451 	.word	0x08000451
					case 0:
						HAL_GPIO_WritePin(GPIOA, SEG4_Pin, 1);
 80003c8:	2201      	movs	r2, #1
 80003ca:	2140      	movs	r1, #64	; 0x40
 80003cc:	4877      	ldr	r0, [pc, #476]	; (80005ac <scan7SEG+0x218>)
 80003ce:	f001 f9dc 	bl	800178a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, SEG1_Pin, 0);
 80003d2:	2200      	movs	r2, #0
 80003d4:	2108      	movs	r1, #8
 80003d6:	4875      	ldr	r0, [pc, #468]	; (80005ac <scan7SEG+0x218>)
 80003d8:	f001 f9d7 	bl	800178a <HAL_GPIO_WritePin>
						display7SEG(led_count1 / 10);
 80003dc:	4b74      	ldr	r3, [pc, #464]	; (80005b0 <scan7SEG+0x21c>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	4a74      	ldr	r2, [pc, #464]	; (80005b4 <scan7SEG+0x220>)
 80003e2:	fba2 2303 	umull	r2, r3, r2, r3
 80003e6:	08db      	lsrs	r3, r3, #3
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	4618      	mov	r0, r3
 80003ec:	f7ff ff52 	bl	8000294 <display7SEG>
						break;
 80003f0:	e0d8      	b.n	80005a4 <scan7SEG+0x210>
					case 1:
						HAL_GPIO_WritePin(GPIOA, SEG1_Pin, 1);
 80003f2:	2201      	movs	r2, #1
 80003f4:	2108      	movs	r1, #8
 80003f6:	486d      	ldr	r0, [pc, #436]	; (80005ac <scan7SEG+0x218>)
 80003f8:	f001 f9c7 	bl	800178a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, SEG2_Pin, 0);
 80003fc:	2200      	movs	r2, #0
 80003fe:	2110      	movs	r1, #16
 8000400:	486a      	ldr	r0, [pc, #424]	; (80005ac <scan7SEG+0x218>)
 8000402:	f001 f9c2 	bl	800178a <HAL_GPIO_WritePin>
						display7SEG(led_count1 % 10);
 8000406:	4b6a      	ldr	r3, [pc, #424]	; (80005b0 <scan7SEG+0x21c>)
 8000408:	781a      	ldrb	r2, [r3, #0]
 800040a:	4b6a      	ldr	r3, [pc, #424]	; (80005b4 <scan7SEG+0x220>)
 800040c:	fba3 1302 	umull	r1, r3, r3, r2
 8000410:	08d9      	lsrs	r1, r3, #3
 8000412:	460b      	mov	r3, r1
 8000414:	009b      	lsls	r3, r3, #2
 8000416:	440b      	add	r3, r1
 8000418:	005b      	lsls	r3, r3, #1
 800041a:	1ad3      	subs	r3, r2, r3
 800041c:	b2db      	uxtb	r3, r3
 800041e:	4618      	mov	r0, r3
 8000420:	f7ff ff38 	bl	8000294 <display7SEG>
						break;
 8000424:	e0be      	b.n	80005a4 <scan7SEG+0x210>
					case 2:
						HAL_GPIO_WritePin(GPIOA, SEG2_Pin, 1);
 8000426:	2201      	movs	r2, #1
 8000428:	2110      	movs	r1, #16
 800042a:	4860      	ldr	r0, [pc, #384]	; (80005ac <scan7SEG+0x218>)
 800042c:	f001 f9ad 	bl	800178a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, SEG3_Pin, 0);
 8000430:	2200      	movs	r2, #0
 8000432:	2120      	movs	r1, #32
 8000434:	485d      	ldr	r0, [pc, #372]	; (80005ac <scan7SEG+0x218>)
 8000436:	f001 f9a8 	bl	800178a <HAL_GPIO_WritePin>
						display7SEG(led_count2 / 10);
 800043a:	4b5f      	ldr	r3, [pc, #380]	; (80005b8 <scan7SEG+0x224>)
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	4a5d      	ldr	r2, [pc, #372]	; (80005b4 <scan7SEG+0x220>)
 8000440:	fba2 2303 	umull	r2, r3, r2, r3
 8000444:	08db      	lsrs	r3, r3, #3
 8000446:	b2db      	uxtb	r3, r3
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff ff23 	bl	8000294 <display7SEG>
						break;
 800044e:	e0a9      	b.n	80005a4 <scan7SEG+0x210>
					case 3:
						HAL_GPIO_WritePin(GPIOA, SEG3_Pin, 1);
 8000450:	2201      	movs	r2, #1
 8000452:	2120      	movs	r1, #32
 8000454:	4855      	ldr	r0, [pc, #340]	; (80005ac <scan7SEG+0x218>)
 8000456:	f001 f998 	bl	800178a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, SEG4_Pin, 0);
 800045a:	2200      	movs	r2, #0
 800045c:	2140      	movs	r1, #64	; 0x40
 800045e:	4853      	ldr	r0, [pc, #332]	; (80005ac <scan7SEG+0x218>)
 8000460:	f001 f993 	bl	800178a <HAL_GPIO_WritePin>
						display7SEG(led_count2 % 10);
 8000464:	4b54      	ldr	r3, [pc, #336]	; (80005b8 <scan7SEG+0x224>)
 8000466:	781a      	ldrb	r2, [r3, #0]
 8000468:	4b52      	ldr	r3, [pc, #328]	; (80005b4 <scan7SEG+0x220>)
 800046a:	fba3 1302 	umull	r1, r3, r3, r2
 800046e:	08d9      	lsrs	r1, r3, #3
 8000470:	460b      	mov	r3, r1
 8000472:	009b      	lsls	r3, r3, #2
 8000474:	440b      	add	r3, r1
 8000476:	005b      	lsls	r3, r3, #1
 8000478:	1ad3      	subs	r3, r2, r3
 800047a:	b2db      	uxtb	r3, r3
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff ff09 	bl	8000294 <display7SEG>
						break;
 8000482:	e08f      	b.n	80005a4 <scan7SEG+0x210>
					default:
						HAL_GPIO_WritePin(GPIOA, SEG1_Pin, 0);
 8000484:	2200      	movs	r2, #0
 8000486:	2108      	movs	r1, #8
 8000488:	4848      	ldr	r0, [pc, #288]	; (80005ac <scan7SEG+0x218>)
 800048a:	f001 f97e 	bl	800178a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, SEG2_Pin, 0);
 800048e:	2200      	movs	r2, #0
 8000490:	2110      	movs	r1, #16
 8000492:	4846      	ldr	r0, [pc, #280]	; (80005ac <scan7SEG+0x218>)
 8000494:	f001 f979 	bl	800178a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, SEG3_Pin, 0);
 8000498:	2200      	movs	r2, #0
 800049a:	2120      	movs	r1, #32
 800049c:	4843      	ldr	r0, [pc, #268]	; (80005ac <scan7SEG+0x218>)
 800049e:	f001 f974 	bl	800178a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, SEG4_Pin, 0);
 80004a2:	2200      	movs	r2, #0
 80004a4:	2140      	movs	r1, #64	; 0x40
 80004a6:	4841      	ldr	r0, [pc, #260]	; (80005ac <scan7SEG+0x218>)
 80004a8:	f001 f96f 	bl	800178a <HAL_GPIO_WritePin>
						display7SEG(10);
 80004ac:	200a      	movs	r0, #10
 80004ae:	f7ff fef1 	bl	8000294 <display7SEG>
						break;
 80004b2:	e077      	b.n	80005a4 <scan7SEG+0x210>
			}

		}
		else{
			switch(i){
 80004b4:	79bb      	ldrb	r3, [r7, #6]
 80004b6:	2b02      	cmp	r3, #2
 80004b8:	d03c      	beq.n	8000534 <scan7SEG+0x1a0>
 80004ba:	2b02      	cmp	r3, #2
 80004bc:	dc5a      	bgt.n	8000574 <scan7SEG+0x1e0>
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d002      	beq.n	80004c8 <scan7SEG+0x134>
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d01b      	beq.n	80004fe <scan7SEG+0x16a>
 80004c6:	e055      	b.n	8000574 <scan7SEG+0x1e0>
					case 0:
						HAL_GPIO_WritePin(GPIOA, SEG3_Pin, 1);
 80004c8:	2201      	movs	r2, #1
 80004ca:	2120      	movs	r1, #32
 80004cc:	4837      	ldr	r0, [pc, #220]	; (80005ac <scan7SEG+0x218>)
 80004ce:	f001 f95c 	bl	800178a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, SEG4_Pin, 1);
 80004d2:	2201      	movs	r2, #1
 80004d4:	2140      	movs	r1, #64	; 0x40
 80004d6:	4835      	ldr	r0, [pc, #212]	; (80005ac <scan7SEG+0x218>)
 80004d8:	f001 f957 	bl	800178a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, SEG1_Pin, 0);
 80004dc:	2200      	movs	r2, #0
 80004de:	2108      	movs	r1, #8
 80004e0:	4832      	ldr	r0, [pc, #200]	; (80005ac <scan7SEG+0x218>)
 80004e2:	f001 f952 	bl	800178a <HAL_GPIO_WritePin>
						display7SEG(modify_val / 10);
 80004e6:	4b35      	ldr	r3, [pc, #212]	; (80005bc <scan7SEG+0x228>)
 80004e8:	881b      	ldrh	r3, [r3, #0]
 80004ea:	4a32      	ldr	r2, [pc, #200]	; (80005b4 <scan7SEG+0x220>)
 80004ec:	fba2 2303 	umull	r2, r3, r2, r3
 80004f0:	08db      	lsrs	r3, r3, #3
 80004f2:	b29b      	uxth	r3, r3
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	4618      	mov	r0, r3
 80004f8:	f7ff fecc 	bl	8000294 <display7SEG>
						break;
 80004fc:	e052      	b.n	80005a4 <scan7SEG+0x210>
					case 1:
						HAL_GPIO_WritePin(GPIOA, SEG1_Pin, 1);
 80004fe:	2201      	movs	r2, #1
 8000500:	2108      	movs	r1, #8
 8000502:	482a      	ldr	r0, [pc, #168]	; (80005ac <scan7SEG+0x218>)
 8000504:	f001 f941 	bl	800178a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, SEG2_Pin, 0);
 8000508:	2200      	movs	r2, #0
 800050a:	2110      	movs	r1, #16
 800050c:	4827      	ldr	r0, [pc, #156]	; (80005ac <scan7SEG+0x218>)
 800050e:	f001 f93c 	bl	800178a <HAL_GPIO_WritePin>
						display7SEG(modify_val % 10);
 8000512:	4b2a      	ldr	r3, [pc, #168]	; (80005bc <scan7SEG+0x228>)
 8000514:	881a      	ldrh	r2, [r3, #0]
 8000516:	4b27      	ldr	r3, [pc, #156]	; (80005b4 <scan7SEG+0x220>)
 8000518:	fba3 1302 	umull	r1, r3, r3, r2
 800051c:	08d9      	lsrs	r1, r3, #3
 800051e:	460b      	mov	r3, r1
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	440b      	add	r3, r1
 8000524:	005b      	lsls	r3, r3, #1
 8000526:	1ad3      	subs	r3, r2, r3
 8000528:	b29b      	uxth	r3, r3
 800052a:	b2db      	uxtb	r3, r3
 800052c:	4618      	mov	r0, r3
 800052e:	f7ff feb1 	bl	8000294 <display7SEG>
						break;
 8000532:	e037      	b.n	80005a4 <scan7SEG+0x210>
					case 2:
						HAL_GPIO_WritePin(GPIOA, SEG2_Pin, 1);
 8000534:	2201      	movs	r2, #1
 8000536:	2110      	movs	r1, #16
 8000538:	481c      	ldr	r0, [pc, #112]	; (80005ac <scan7SEG+0x218>)
 800053a:	f001 f926 	bl	800178a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, SEG3_Pin, 0);
 800053e:	2200      	movs	r2, #0
 8000540:	2120      	movs	r1, #32
 8000542:	481a      	ldr	r0, [pc, #104]	; (80005ac <scan7SEG+0x218>)
 8000544:	f001 f921 	bl	800178a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, SEG4_Pin, 0);
 8000548:	2200      	movs	r2, #0
 800054a:	2140      	movs	r1, #64	; 0x40
 800054c:	4817      	ldr	r0, [pc, #92]	; (80005ac <scan7SEG+0x218>)
 800054e:	f001 f91c 	bl	800178a <HAL_GPIO_WritePin>
						display7SEG(status - 10);
 8000552:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <scan7SEG+0x22c>)
 8000554:	881b      	ldrh	r3, [r3, #0]
 8000556:	b2db      	uxtb	r3, r3
 8000558:	3b0a      	subs	r3, #10
 800055a:	b2db      	uxtb	r3, r3
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff fe99 	bl	8000294 <display7SEG>
						display7SEG(status - 10);
 8000562:	4b17      	ldr	r3, [pc, #92]	; (80005c0 <scan7SEG+0x22c>)
 8000564:	881b      	ldrh	r3, [r3, #0]
 8000566:	b2db      	uxtb	r3, r3
 8000568:	3b0a      	subs	r3, #10
 800056a:	b2db      	uxtb	r3, r3
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff fe91 	bl	8000294 <display7SEG>
						break;
 8000572:	e017      	b.n	80005a4 <scan7SEG+0x210>
					default:
						HAL_GPIO_WritePin(GPIOA, SEG1_Pin, 0);
 8000574:	2200      	movs	r2, #0
 8000576:	2108      	movs	r1, #8
 8000578:	480c      	ldr	r0, [pc, #48]	; (80005ac <scan7SEG+0x218>)
 800057a:	f001 f906 	bl	800178a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, SEG2_Pin, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2110      	movs	r1, #16
 8000582:	480a      	ldr	r0, [pc, #40]	; (80005ac <scan7SEG+0x218>)
 8000584:	f001 f901 	bl	800178a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, SEG3_Pin, 0);
 8000588:	2200      	movs	r2, #0
 800058a:	2120      	movs	r1, #32
 800058c:	4807      	ldr	r0, [pc, #28]	; (80005ac <scan7SEG+0x218>)
 800058e:	f001 f8fc 	bl	800178a <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, SEG4_Pin, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	2140      	movs	r1, #64	; 0x40
 8000596:	4805      	ldr	r0, [pc, #20]	; (80005ac <scan7SEG+0x218>)
 8000598:	f001 f8f7 	bl	800178a <HAL_GPIO_WritePin>
						display7SEG(10);
 800059c:	200a      	movs	r0, #10
 800059e:	f7ff fe79 	bl	8000294 <display7SEG>
						break;
 80005a2:	bf00      	nop
			}
		}
	//}

}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40010800 	.word	0x40010800
 80005b0:	2000003b 	.word	0x2000003b
 80005b4:	cccccccd 	.word	0xcccccccd
 80005b8:	2000003c 	.word	0x2000003c
 80005bc:	20000034 	.word	0x20000034
 80005c0:	20000080 	.word	0x20000080

080005c4 <write_led>:
//			HAL_GPIO_WritePin(gpio, R2_F_Pin, ((displaySegments >> 5) & 1) ? GPIO_PIN_RESET : GPIO_PIN_SET);
//			HAL_GPIO_WritePin(gpio, R2_G_Pin, ((displaySegments >> 6) & 1) ? GPIO_PIN_RESET : GPIO_PIN_SET);
//	    }
//  }

void write_led(uint16_t R1_LED, uint16_t R2_LED, int state){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	603a      	str	r2, [r7, #0]
 80005ce:	80fb      	strh	r3, [r7, #6]
 80005d0:	460b      	mov	r3, r1
 80005d2:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, R1_LED, state);
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	88fb      	ldrh	r3, [r7, #6]
 80005da:	4619      	mov	r1, r3
 80005dc:	4806      	ldr	r0, [pc, #24]	; (80005f8 <write_led+0x34>)
 80005de:	f001 f8d4 	bl	800178a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, R2_LED, state);
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	b2da      	uxtb	r2, r3
 80005e6:	88bb      	ldrh	r3, [r7, #4]
 80005e8:	4619      	mov	r1, r3
 80005ea:	4803      	ldr	r0, [pc, #12]	; (80005f8 <write_led+0x34>)
 80005ec:	f001 f8cd 	bl	800178a <HAL_GPIO_WritePin>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40010c00 	.word	0x40010c00

080005fc <fsm_for_normal>:
*      Author: ADMIN
*/

#include "input_processing.h"

void fsm_for_normal (){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	switch(status){
 8000600:	4bb1      	ldr	r3, [pc, #708]	; (80008c8 <fsm_for_normal+0x2cc>)
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	2b04      	cmp	r3, #4
 8000606:	f200 81d5 	bhi.w	80009b4 <fsm_for_normal+0x3b8>
 800060a:	a201      	add	r2, pc, #4	; (adr r2, 8000610 <fsm_for_normal+0x14>)
 800060c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000610:	08000625 	.word	0x08000625
 8000614:	08000685 	.word	0x08000685
 8000618:	08000747 	.word	0x08000747
 800061c:	0800080b 	.word	0x0800080b
 8000620:	080008e5 	.word	0x080008e5
			case INIT:
				write_led(R1_RED_Pin, R2_RED_Pin, 1);			//RED LEDs OFF
 8000624:	2201      	movs	r2, #1
 8000626:	2140      	movs	r1, #64	; 0x40
 8000628:	2008      	movs	r0, #8
 800062a:	f7ff ffcb 	bl	80005c4 <write_led>
				write_led(R1_YELLOW_Pin, R2_YELLOW_Pin, 1);		//YELLOW LEDs OFF
 800062e:	2201      	movs	r2, #1
 8000630:	2180      	movs	r1, #128	; 0x80
 8000632:	2010      	movs	r0, #16
 8000634:	f7ff ffc6 	bl	80005c4 <write_led>
				write_led(R1_GREEN_Pin, R2_GREEN_Pin, 1);		//GREEN LEDs OFF
 8000638:	2201      	movs	r2, #1
 800063a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063e:	2020      	movs	r0, #32
 8000640:	f7ff ffc0 	bl	80005c4 <write_led>
				write_led(SEG1_Pin, SEG2_Pin, 1);				//4 7SEG OFF
 8000644:	2201      	movs	r2, #1
 8000646:	2110      	movs	r1, #16
 8000648:	2008      	movs	r0, #8
 800064a:	f7ff ffbb 	bl	80005c4 <write_led>
				write_led(SEG3_Pin, SEG4_Pin, 1);
 800064e:	2201      	movs	r2, #1
 8000650:	2140      	movs	r1, #64	; 0x40
 8000652:	2020      	movs	r0, #32
 8000654:	f7ff ffb6 	bl	80005c4 <write_led>

				status = RED_GREEN;
 8000658:	4b9b      	ldr	r3, [pc, #620]	; (80008c8 <fsm_for_normal+0x2cc>)
 800065a:	2201      	movs	r2, #1
 800065c:	801a      	strh	r2, [r3, #0]
				setTimer(100, 0);								//Timer for every second
 800065e:	2100      	movs	r1, #0
 8000660:	2064      	movs	r0, #100	; 0x64
 8000662:	f000 fd2b 	bl	80010bc <setTimer>
				setTimer(led_duration[GREEN_DURA] * 100, 1);	//Timer for led duration
 8000666:	4b99      	ldr	r3, [pc, #612]	; (80008cc <fsm_for_normal+0x2d0>)
 8000668:	789b      	ldrb	r3, [r3, #2]
 800066a:	461a      	mov	r2, r3
 800066c:	2364      	movs	r3, #100	; 0x64
 800066e:	fb03 f302 	mul.w	r3, r3, r2
 8000672:	2101      	movs	r1, #1
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fd21 	bl	80010bc <setTimer>
				setTimer(24, 2);								//Timer for scan 7SEG
 800067a:	2102      	movs	r1, #2
 800067c:	2018      	movs	r0, #24
 800067e:	f000 fd1d 	bl	80010bc <setTimer>
				break;
 8000682:	e197      	b.n	80009b4 <fsm_for_normal+0x3b8>
			case RED_GREEN:
				if(timer_flag[1]){
 8000684:	4b92      	ldr	r3, [pc, #584]	; (80008d0 <fsm_for_normal+0x2d4>)
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d023      	beq.n	80006d4 <fsm_for_normal+0xd8>
//					if(led_count1 < led_count2){				//If red = 0 and green > 0, wait till green = 0
//						setTimer(led_count2 * 100, 1);			//else change to state RED_YELLOW
//					}
//					else{
						++led_count1;
 800068c:	4b91      	ldr	r3, [pc, #580]	; (80008d4 <fsm_for_normal+0x2d8>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	3301      	adds	r3, #1
 8000692:	b2da      	uxtb	r2, r3
 8000694:	4b8f      	ldr	r3, [pc, #572]	; (80008d4 <fsm_for_normal+0x2d8>)
 8000696:	701a      	strb	r2, [r3, #0]
						++led_count2;
 8000698:	4b8f      	ldr	r3, [pc, #572]	; (80008d8 <fsm_for_normal+0x2dc>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	3301      	adds	r3, #1
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	4b8d      	ldr	r3, [pc, #564]	; (80008d8 <fsm_for_normal+0x2dc>)
 80006a2:	701a      	strb	r2, [r3, #0]
						led_count2 = led_duration[YELLOW_DURA];
 80006a4:	4b89      	ldr	r3, [pc, #548]	; (80008cc <fsm_for_normal+0x2d0>)
 80006a6:	785a      	ldrb	r2, [r3, #1]
 80006a8:	4b8b      	ldr	r3, [pc, #556]	; (80008d8 <fsm_for_normal+0x2dc>)
 80006aa:	701a      	strb	r2, [r3, #0]
						status = RED_YELLOW;
 80006ac:	4b86      	ldr	r3, [pc, #536]	; (80008c8 <fsm_for_normal+0x2cc>)
 80006ae:	2202      	movs	r2, #2
 80006b0:	801a      	strh	r2, [r3, #0]
						write_led(R1_RED_Pin, R2_GREEN_Pin, 1);
 80006b2:	2201      	movs	r2, #1
 80006b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b8:	2008      	movs	r0, #8
 80006ba:	f7ff ff83 	bl	80005c4 <write_led>
						setTimer(led_duration[YELLOW_DURA] * 100, 1);
 80006be:	4b83      	ldr	r3, [pc, #524]	; (80008cc <fsm_for_normal+0x2d0>)
 80006c0:	785b      	ldrb	r3, [r3, #1]
 80006c2:	461a      	mov	r2, r3
 80006c4:	2364      	movs	r3, #100	; 0x64
 80006c6:	fb03 f302 	mul.w	r3, r3, r2
 80006ca:	2101      	movs	r1, #1
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 fcf5 	bl	80010bc <setTimer>
 80006d2:	e020      	b.n	8000716 <fsm_for_normal+0x11a>
					//}

				}
				else{
					write_led(R1_RED_Pin, R2_GREEN_Pin, 0);		//ROAD1: RED ON, ROAD2: GREEN ON
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006da:	2008      	movs	r0, #8
 80006dc:	f7ff ff72 	bl	80005c4 <write_led>

					if(timer_flag[2]) {
 80006e0:	4b7b      	ldr	r3, [pc, #492]	; (80008d0 <fsm_for_normal+0x2d4>)
 80006e2:	689b      	ldr	r3, [r3, #8]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d016      	beq.n	8000716 <fsm_for_normal+0x11a>
						scan7SEG(mode, segth++);									//display 4 7SEG count
 80006e8:	4b7c      	ldr	r3, [pc, #496]	; (80008dc <fsm_for_normal+0x2e0>)
 80006ea:	781a      	ldrb	r2, [r3, #0]
 80006ec:	4b7c      	ldr	r3, [pc, #496]	; (80008e0 <fsm_for_normal+0x2e4>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	1c59      	adds	r1, r3, #1
 80006f2:	b2c8      	uxtb	r0, r1
 80006f4:	497a      	ldr	r1, [pc, #488]	; (80008e0 <fsm_for_normal+0x2e4>)
 80006f6:	7008      	strb	r0, [r1, #0]
 80006f8:	4619      	mov	r1, r3
 80006fa:	4610      	mov	r0, r2
 80006fc:	f7ff fe4a 	bl	8000394 <scan7SEG>
						segth %= 4;
 8000700:	4b77      	ldr	r3, [pc, #476]	; (80008e0 <fsm_for_normal+0x2e4>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	f003 0303 	and.w	r3, r3, #3
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b75      	ldr	r3, [pc, #468]	; (80008e0 <fsm_for_normal+0x2e4>)
 800070c:	701a      	strb	r2, [r3, #0]
						setTimer(24, 2);
 800070e:	2102      	movs	r1, #2
 8000710:	2018      	movs	r0, #24
 8000712:	f000 fcd3 	bl	80010bc <setTimer>
					}
				}


				if(is_Pressed(BUTTON1)){						//If BUTTON1 is pressed, change to MODIFY_RED state
 8000716:	2000      	movs	r0, #0
 8000718:	f7ff fd28 	bl	800016c <is_Pressed>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	f000 8141 	beq.w	80009a6 <fsm_for_normal+0x3aa>
					status = MODIFY_RED;						//and set timer for every 0.5 sec
 8000724:	4b68      	ldr	r3, [pc, #416]	; (80008c8 <fsm_for_normal+0x2cc>)
 8000726:	220c      	movs	r2, #12
 8000728:	801a      	strh	r2, [r3, #0]
					write_led(R1_RED_Pin, R2_GREEN_Pin, 1);
 800072a:	2201      	movs	r2, #1
 800072c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000730:	2008      	movs	r0, #8
 8000732:	f7ff ff47 	bl	80005c4 <write_led>
					mode = 1;
 8000736:	4b69      	ldr	r3, [pc, #420]	; (80008dc <fsm_for_normal+0x2e0>)
 8000738:	2201      	movs	r2, #1
 800073a:	701a      	strb	r2, [r3, #0]
					setTimer(50, 0);
 800073c:	2100      	movs	r1, #0
 800073e:	2032      	movs	r0, #50	; 0x32
 8000740:	f000 fcbc 	bl	80010bc <setTimer>
				}
				break;
 8000744:	e12f      	b.n	80009a6 <fsm_for_normal+0x3aa>
			case RED_YELLOW:
				if(timer_flag[1]){
 8000746:	4b62      	ldr	r3, [pc, #392]	; (80008d0 <fsm_for_normal+0x2d4>)
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d026      	beq.n	800079c <fsm_for_normal+0x1a0>
//					if(led_count1 < led_count2){
//						setTimer(led_count2 * 100, 1);
//					}
//					else{
						++led_count1;
 800074e:	4b61      	ldr	r3, [pc, #388]	; (80008d4 <fsm_for_normal+0x2d8>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	3301      	adds	r3, #1
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b5f      	ldr	r3, [pc, #380]	; (80008d4 <fsm_for_normal+0x2d8>)
 8000758:	701a      	strb	r2, [r3, #0]
						++led_count2;
 800075a:	4b5f      	ldr	r3, [pc, #380]	; (80008d8 <fsm_for_normal+0x2dc>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	3301      	adds	r3, #1
 8000760:	b2da      	uxtb	r2, r3
 8000762:	4b5d      	ldr	r3, [pc, #372]	; (80008d8 <fsm_for_normal+0x2dc>)
 8000764:	701a      	strb	r2, [r3, #0]
						led_count1 = led_duration[GREEN_DURA];
 8000766:	4b59      	ldr	r3, [pc, #356]	; (80008cc <fsm_for_normal+0x2d0>)
 8000768:	789a      	ldrb	r2, [r3, #2]
 800076a:	4b5a      	ldr	r3, [pc, #360]	; (80008d4 <fsm_for_normal+0x2d8>)
 800076c:	701a      	strb	r2, [r3, #0]
						led_count2 = led_duration[RED_DURA];
 800076e:	4b57      	ldr	r3, [pc, #348]	; (80008cc <fsm_for_normal+0x2d0>)
 8000770:	781a      	ldrb	r2, [r3, #0]
 8000772:	4b59      	ldr	r3, [pc, #356]	; (80008d8 <fsm_for_normal+0x2dc>)
 8000774:	701a      	strb	r2, [r3, #0]
						status = GREEN_RED;
 8000776:	4b54      	ldr	r3, [pc, #336]	; (80008c8 <fsm_for_normal+0x2cc>)
 8000778:	2203      	movs	r2, #3
 800077a:	801a      	strh	r2, [r3, #0]
						write_led(R1_RED_Pin, R2_YELLOW_Pin, 1);
 800077c:	2201      	movs	r2, #1
 800077e:	2180      	movs	r1, #128	; 0x80
 8000780:	2008      	movs	r0, #8
 8000782:	f7ff ff1f 	bl	80005c4 <write_led>
						setTimer(led_duration[GREEN_DURA] * 100, 1);
 8000786:	4b51      	ldr	r3, [pc, #324]	; (80008cc <fsm_for_normal+0x2d0>)
 8000788:	789b      	ldrb	r3, [r3, #2]
 800078a:	461a      	mov	r2, r3
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	fb03 f302 	mul.w	r3, r3, r2
 8000792:	2101      	movs	r1, #1
 8000794:	4618      	mov	r0, r3
 8000796:	f000 fc91 	bl	80010bc <setTimer>
 800079a:	e01f      	b.n	80007dc <fsm_for_normal+0x1e0>
					//}
				}
				else{
					write_led(R1_RED_Pin, R2_YELLOW_Pin, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	2180      	movs	r1, #128	; 0x80
 80007a0:	2008      	movs	r0, #8
 80007a2:	f7ff ff0f 	bl	80005c4 <write_led>

					if(timer_flag[2]) {
 80007a6:	4b4a      	ldr	r3, [pc, #296]	; (80008d0 <fsm_for_normal+0x2d4>)
 80007a8:	689b      	ldr	r3, [r3, #8]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d016      	beq.n	80007dc <fsm_for_normal+0x1e0>
						scan7SEG(mode, segth++);									//display 4 7SEG count
 80007ae:	4b4b      	ldr	r3, [pc, #300]	; (80008dc <fsm_for_normal+0x2e0>)
 80007b0:	781a      	ldrb	r2, [r3, #0]
 80007b2:	4b4b      	ldr	r3, [pc, #300]	; (80008e0 <fsm_for_normal+0x2e4>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	1c59      	adds	r1, r3, #1
 80007b8:	b2c8      	uxtb	r0, r1
 80007ba:	4949      	ldr	r1, [pc, #292]	; (80008e0 <fsm_for_normal+0x2e4>)
 80007bc:	7008      	strb	r0, [r1, #0]
 80007be:	4619      	mov	r1, r3
 80007c0:	4610      	mov	r0, r2
 80007c2:	f7ff fde7 	bl	8000394 <scan7SEG>
						segth %= 4;
 80007c6:	4b46      	ldr	r3, [pc, #280]	; (80008e0 <fsm_for_normal+0x2e4>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	f003 0303 	and.w	r3, r3, #3
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	4b43      	ldr	r3, [pc, #268]	; (80008e0 <fsm_for_normal+0x2e4>)
 80007d2:	701a      	strb	r2, [r3, #0]
						setTimer(24, 2);
 80007d4:	2102      	movs	r1, #2
 80007d6:	2018      	movs	r0, #24
 80007d8:	f000 fc70 	bl	80010bc <setTimer>
					}
				}

				if(is_Pressed(BUTTON1)){
 80007dc:	2000      	movs	r0, #0
 80007de:	f7ff fcc5 	bl	800016c <is_Pressed>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	f000 80e0 	beq.w	80009aa <fsm_for_normal+0x3ae>
					status = MODIFY_RED;
 80007ea:	4b37      	ldr	r3, [pc, #220]	; (80008c8 <fsm_for_normal+0x2cc>)
 80007ec:	220c      	movs	r2, #12
 80007ee:	801a      	strh	r2, [r3, #0]
					write_led(R1_RED_Pin, R2_YELLOW_Pin, 1);
 80007f0:	2201      	movs	r2, #1
 80007f2:	2180      	movs	r1, #128	; 0x80
 80007f4:	2008      	movs	r0, #8
 80007f6:	f7ff fee5 	bl	80005c4 <write_led>
					mode = 1;
 80007fa:	4b38      	ldr	r3, [pc, #224]	; (80008dc <fsm_for_normal+0x2e0>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	701a      	strb	r2, [r3, #0]
					setTimer(50, 0);
 8000800:	2100      	movs	r1, #0
 8000802:	2032      	movs	r0, #50	; 0x32
 8000804:	f000 fc5a 	bl	80010bc <setTimer>
				}
				break;
 8000808:	e0cf      	b.n	80009aa <fsm_for_normal+0x3ae>
			case GREEN_RED:
				if(timer_flag[1]){
 800080a:	4b31      	ldr	r3, [pc, #196]	; (80008d0 <fsm_for_normal+0x2d4>)
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d022      	beq.n	8000858 <fsm_for_normal+0x25c>
//					if(led_count2 < led_count1){
//						setTimer(led_count1 * 100, 1);
//					}
//					else{
						++led_count1;
 8000812:	4b30      	ldr	r3, [pc, #192]	; (80008d4 <fsm_for_normal+0x2d8>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	3301      	adds	r3, #1
 8000818:	b2da      	uxtb	r2, r3
 800081a:	4b2e      	ldr	r3, [pc, #184]	; (80008d4 <fsm_for_normal+0x2d8>)
 800081c:	701a      	strb	r2, [r3, #0]
						++led_count2;
 800081e:	4b2e      	ldr	r3, [pc, #184]	; (80008d8 <fsm_for_normal+0x2dc>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	3301      	adds	r3, #1
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4b2c      	ldr	r3, [pc, #176]	; (80008d8 <fsm_for_normal+0x2dc>)
 8000828:	701a      	strb	r2, [r3, #0]
						led_count1 = led_duration[YELLOW_DURA];
 800082a:	4b28      	ldr	r3, [pc, #160]	; (80008cc <fsm_for_normal+0x2d0>)
 800082c:	785a      	ldrb	r2, [r3, #1]
 800082e:	4b29      	ldr	r3, [pc, #164]	; (80008d4 <fsm_for_normal+0x2d8>)
 8000830:	701a      	strb	r2, [r3, #0]
						status = YELLOW_RED;
 8000832:	4b25      	ldr	r3, [pc, #148]	; (80008c8 <fsm_for_normal+0x2cc>)
 8000834:	2204      	movs	r2, #4
 8000836:	801a      	strh	r2, [r3, #0]
						write_led(R1_GREEN_Pin, R2_RED_Pin, 1);
 8000838:	2201      	movs	r2, #1
 800083a:	2140      	movs	r1, #64	; 0x40
 800083c:	2020      	movs	r0, #32
 800083e:	f7ff fec1 	bl	80005c4 <write_led>
						setTimer(led_duration[YELLOW_DURA] * 100, 1);
 8000842:	4b22      	ldr	r3, [pc, #136]	; (80008cc <fsm_for_normal+0x2d0>)
 8000844:	785b      	ldrb	r3, [r3, #1]
 8000846:	461a      	mov	r2, r3
 8000848:	2364      	movs	r3, #100	; 0x64
 800084a:	fb03 f302 	mul.w	r3, r3, r2
 800084e:	2101      	movs	r1, #1
 8000850:	4618      	mov	r0, r3
 8000852:	f000 fc33 	bl	80010bc <setTimer>
 8000856:	e01f      	b.n	8000898 <fsm_for_normal+0x29c>
					//}
				}
				else{
					write_led(R1_GREEN_Pin, R2_RED_Pin, 0);
 8000858:	2200      	movs	r2, #0
 800085a:	2140      	movs	r1, #64	; 0x40
 800085c:	2020      	movs	r0, #32
 800085e:	f7ff feb1 	bl	80005c4 <write_led>

					if(timer_flag[2]) {
 8000862:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <fsm_for_normal+0x2d4>)
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d016      	beq.n	8000898 <fsm_for_normal+0x29c>
						scan7SEG(mode, segth++);									//display 4 7SEG count
 800086a:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <fsm_for_normal+0x2e0>)
 800086c:	781a      	ldrb	r2, [r3, #0]
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <fsm_for_normal+0x2e4>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	1c59      	adds	r1, r3, #1
 8000874:	b2c8      	uxtb	r0, r1
 8000876:	491a      	ldr	r1, [pc, #104]	; (80008e0 <fsm_for_normal+0x2e4>)
 8000878:	7008      	strb	r0, [r1, #0]
 800087a:	4619      	mov	r1, r3
 800087c:	4610      	mov	r0, r2
 800087e:	f7ff fd89 	bl	8000394 <scan7SEG>
						segth %= 4;
 8000882:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <fsm_for_normal+0x2e4>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	f003 0303 	and.w	r3, r3, #3
 800088a:	b2da      	uxtb	r2, r3
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <fsm_for_normal+0x2e4>)
 800088e:	701a      	strb	r2, [r3, #0]
						setTimer(24, 2);
 8000890:	2102      	movs	r1, #2
 8000892:	2018      	movs	r0, #24
 8000894:	f000 fc12 	bl	80010bc <setTimer>
					}
				}

				if(is_Pressed(BUTTON1)){
 8000898:	2000      	movs	r0, #0
 800089a:	f7ff fc67 	bl	800016c <is_Pressed>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	f000 8084 	beq.w	80009ae <fsm_for_normal+0x3b2>
					status = MODIFY_RED;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <fsm_for_normal+0x2cc>)
 80008a8:	220c      	movs	r2, #12
 80008aa:	801a      	strh	r2, [r3, #0]
					write_led(R1_GREEN_Pin, R2_RED_Pin, 1);
 80008ac:	2201      	movs	r2, #1
 80008ae:	2140      	movs	r1, #64	; 0x40
 80008b0:	2020      	movs	r0, #32
 80008b2:	f7ff fe87 	bl	80005c4 <write_led>
					mode = 1;
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <fsm_for_normal+0x2e0>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	701a      	strb	r2, [r3, #0]
					setTimer(50, 0);
 80008bc:	2100      	movs	r1, #0
 80008be:	2032      	movs	r0, #50	; 0x32
 80008c0:	f000 fbfc 	bl	80010bc <setTimer>
				}
				break;
 80008c4:	e073      	b.n	80009ae <fsm_for_normal+0x3b2>
 80008c6:	bf00      	nop
 80008c8:	20000080 	.word	0x20000080
 80008cc:	20000038 	.word	0x20000038
 80008d0:	20000090 	.word	0x20000090
 80008d4:	2000003b 	.word	0x2000003b
 80008d8:	2000003c 	.word	0x2000003c
 80008dc:	20000082 	.word	0x20000082
 80008e0:	20000083 	.word	0x20000083
			case YELLOW_RED:
				if(timer_flag[1]){
 80008e4:	4b44      	ldr	r3, [pc, #272]	; (80009f8 <fsm_for_normal+0x3fc>)
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d026      	beq.n	800093a <fsm_for_normal+0x33e>
//					if(led_count2 < led_count1){
//						setTimer(led_count1 * 100, 1);
//					}
//					else{
						++led_count1;
 80008ec:	4b43      	ldr	r3, [pc, #268]	; (80009fc <fsm_for_normal+0x400>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	3301      	adds	r3, #1
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	4b41      	ldr	r3, [pc, #260]	; (80009fc <fsm_for_normal+0x400>)
 80008f6:	701a      	strb	r2, [r3, #0]
						++led_count2;
 80008f8:	4b41      	ldr	r3, [pc, #260]	; (8000a00 <fsm_for_normal+0x404>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	3301      	adds	r3, #1
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	4b3f      	ldr	r3, [pc, #252]	; (8000a00 <fsm_for_normal+0x404>)
 8000902:	701a      	strb	r2, [r3, #0]
						led_count1 = led_duration[RED_DURA];
 8000904:	4b3f      	ldr	r3, [pc, #252]	; (8000a04 <fsm_for_normal+0x408>)
 8000906:	781a      	ldrb	r2, [r3, #0]
 8000908:	4b3c      	ldr	r3, [pc, #240]	; (80009fc <fsm_for_normal+0x400>)
 800090a:	701a      	strb	r2, [r3, #0]
						led_count2 = led_duration[GREEN_DURA];
 800090c:	4b3d      	ldr	r3, [pc, #244]	; (8000a04 <fsm_for_normal+0x408>)
 800090e:	789a      	ldrb	r2, [r3, #2]
 8000910:	4b3b      	ldr	r3, [pc, #236]	; (8000a00 <fsm_for_normal+0x404>)
 8000912:	701a      	strb	r2, [r3, #0]
						status = RED_GREEN;
 8000914:	4b3c      	ldr	r3, [pc, #240]	; (8000a08 <fsm_for_normal+0x40c>)
 8000916:	2201      	movs	r2, #1
 8000918:	801a      	strh	r2, [r3, #0]
						write_led(R1_YELLOW_Pin, R2_RED_Pin, 1);
 800091a:	2201      	movs	r2, #1
 800091c:	2140      	movs	r1, #64	; 0x40
 800091e:	2010      	movs	r0, #16
 8000920:	f7ff fe50 	bl	80005c4 <write_led>
						setTimer(led_duration[GREEN_DURA] * 100, 1);
 8000924:	4b37      	ldr	r3, [pc, #220]	; (8000a04 <fsm_for_normal+0x408>)
 8000926:	789b      	ldrb	r3, [r3, #2]
 8000928:	461a      	mov	r2, r3
 800092a:	2364      	movs	r3, #100	; 0x64
 800092c:	fb03 f302 	mul.w	r3, r3, r2
 8000930:	2101      	movs	r1, #1
 8000932:	4618      	mov	r0, r3
 8000934:	f000 fbc2 	bl	80010bc <setTimer>
 8000938:	e01f      	b.n	800097a <fsm_for_normal+0x37e>
					//}
				}
				else{
					write_led(R1_YELLOW_Pin, R2_RED_Pin, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2140      	movs	r1, #64	; 0x40
 800093e:	2010      	movs	r0, #16
 8000940:	f7ff fe40 	bl	80005c4 <write_led>

					if(timer_flag[2]) {
 8000944:	4b2c      	ldr	r3, [pc, #176]	; (80009f8 <fsm_for_normal+0x3fc>)
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d016      	beq.n	800097a <fsm_for_normal+0x37e>
						scan7SEG(mode, segth++);									//display 4 7SEG count
 800094c:	4b2f      	ldr	r3, [pc, #188]	; (8000a0c <fsm_for_normal+0x410>)
 800094e:	781a      	ldrb	r2, [r3, #0]
 8000950:	4b2f      	ldr	r3, [pc, #188]	; (8000a10 <fsm_for_normal+0x414>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	1c59      	adds	r1, r3, #1
 8000956:	b2c8      	uxtb	r0, r1
 8000958:	492d      	ldr	r1, [pc, #180]	; (8000a10 <fsm_for_normal+0x414>)
 800095a:	7008      	strb	r0, [r1, #0]
 800095c:	4619      	mov	r1, r3
 800095e:	4610      	mov	r0, r2
 8000960:	f7ff fd18 	bl	8000394 <scan7SEG>
						segth %= 4;
 8000964:	4b2a      	ldr	r3, [pc, #168]	; (8000a10 <fsm_for_normal+0x414>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	f003 0303 	and.w	r3, r3, #3
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <fsm_for_normal+0x414>)
 8000970:	701a      	strb	r2, [r3, #0]
						setTimer(24, 2);
 8000972:	2102      	movs	r1, #2
 8000974:	2018      	movs	r0, #24
 8000976:	f000 fba1 	bl	80010bc <setTimer>
					}
				}

				if(is_Pressed(BUTTON1)){
 800097a:	2000      	movs	r0, #0
 800097c:	f7ff fbf6 	bl	800016c <is_Pressed>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d015      	beq.n	80009b2 <fsm_for_normal+0x3b6>
					status = MODIFY_RED;
 8000986:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <fsm_for_normal+0x40c>)
 8000988:	220c      	movs	r2, #12
 800098a:	801a      	strh	r2, [r3, #0]
					write_led(R1_YELLOW_Pin, R2_RED_Pin, 1);
 800098c:	2201      	movs	r2, #1
 800098e:	2140      	movs	r1, #64	; 0x40
 8000990:	2010      	movs	r0, #16
 8000992:	f7ff fe17 	bl	80005c4 <write_led>
					mode = 1;
 8000996:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <fsm_for_normal+0x410>)
 8000998:	2201      	movs	r2, #1
 800099a:	701a      	strb	r2, [r3, #0]
					setTimer(50, 0);
 800099c:	2100      	movs	r1, #0
 800099e:	2032      	movs	r0, #50	; 0x32
 80009a0:	f000 fb8c 	bl	80010bc <setTimer>
				}
				break;
 80009a4:	e005      	b.n	80009b2 <fsm_for_normal+0x3b6>
				break;
 80009a6:	bf00      	nop
 80009a8:	e004      	b.n	80009b4 <fsm_for_normal+0x3b8>
				break;
 80009aa:	bf00      	nop
 80009ac:	e002      	b.n	80009b4 <fsm_for_normal+0x3b8>
				break;
 80009ae:	bf00      	nop
 80009b0:	e000      	b.n	80009b4 <fsm_for_normal+0x3b8>
				break;
 80009b2:	bf00      	nop
		}

		if(timer_flag[0] && mode == 0){						//Every second, decrease led count
 80009b4:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <fsm_for_normal+0x3fc>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d01b      	beq.n	80009f4 <fsm_for_normal+0x3f8>
 80009bc:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <fsm_for_normal+0x410>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d117      	bne.n	80009f4 <fsm_for_normal+0x3f8>
			if(led_count1 > 0) --led_count1;
 80009c4:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <fsm_for_normal+0x400>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d005      	beq.n	80009d8 <fsm_for_normal+0x3dc>
 80009cc:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <fsm_for_normal+0x400>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	3b01      	subs	r3, #1
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <fsm_for_normal+0x400>)
 80009d6:	701a      	strb	r2, [r3, #0]
			if(led_count2 > 0) --led_count2;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <fsm_for_normal+0x404>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d005      	beq.n	80009ec <fsm_for_normal+0x3f0>
 80009e0:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <fsm_for_normal+0x404>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	3b01      	subs	r3, #1
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <fsm_for_normal+0x404>)
 80009ea:	701a      	strb	r2, [r3, #0]
			setTimer(100, 0);
 80009ec:	2100      	movs	r1, #0
 80009ee:	2064      	movs	r0, #100	; 0x64
 80009f0:	f000 fb64 	bl	80010bc <setTimer>
		}
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000090 	.word	0x20000090
 80009fc:	2000003b 	.word	0x2000003b
 8000a00:	2000003c 	.word	0x2000003c
 8000a04:	20000038 	.word	0x20000038
 8000a08:	20000080 	.word	0x20000080
 8000a0c:	20000082 	.word	0x20000082
 8000a10:	20000083 	.word	0x20000083

08000a14 <fsm_for_modify>:

void fsm_for_modify(){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	switch(status){
 8000a18:	4baf      	ldr	r3, [pc, #700]	; (8000cd8 <fsm_for_modify+0x2c4>)
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a20:	4293      	cmp	r3, r2
 8000a22:	f000 812b 	beq.w	8000c7c <fsm_for_modify+0x268>
 8000a26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a2a:	f280 816a 	bge.w	8000d02 <fsm_for_modify+0x2ee>
 8000a2e:	2b0e      	cmp	r3, #14
 8000a30:	f000 809a 	beq.w	8000b68 <fsm_for_modify+0x154>
 8000a34:	2b0e      	cmp	r3, #14
 8000a36:	f300 8164 	bgt.w	8000d02 <fsm_for_modify+0x2ee>
 8000a3a:	2b0c      	cmp	r3, #12
 8000a3c:	d002      	beq.n	8000a44 <fsm_for_modify+0x30>
 8000a3e:	2b0d      	cmp	r3, #13
 8000a40:	d049      	beq.n	8000ad6 <fsm_for_modify+0xc2>
 8000a42:	e15e      	b.n	8000d02 <fsm_for_modify+0x2ee>
			case MODIFY_RED:
				if(timer_flag[2]) {
 8000a44:	4ba5      	ldr	r3, [pc, #660]	; (8000cdc <fsm_for_modify+0x2c8>)
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d01c      	beq.n	8000a86 <fsm_for_modify+0x72>
					scan7SEG(mode, segth++);					//Display modified value and number of MODE
 8000a4c:	4ba4      	ldr	r3, [pc, #656]	; (8000ce0 <fsm_for_modify+0x2cc>)
 8000a4e:	781a      	ldrb	r2, [r3, #0]
 8000a50:	4ba4      	ldr	r3, [pc, #656]	; (8000ce4 <fsm_for_modify+0x2d0>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	1c59      	adds	r1, r3, #1
 8000a56:	b2c8      	uxtb	r0, r1
 8000a58:	49a2      	ldr	r1, [pc, #648]	; (8000ce4 <fsm_for_modify+0x2d0>)
 8000a5a:	7008      	strb	r0, [r1, #0]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4610      	mov	r0, r2
 8000a60:	f7ff fc98 	bl	8000394 <scan7SEG>
					segth %= 3;
 8000a64:	4b9f      	ldr	r3, [pc, #636]	; (8000ce4 <fsm_for_modify+0x2d0>)
 8000a66:	781a      	ldrb	r2, [r3, #0]
 8000a68:	4b9f      	ldr	r3, [pc, #636]	; (8000ce8 <fsm_for_modify+0x2d4>)
 8000a6a:	fba3 1302 	umull	r1, r3, r3, r2
 8000a6e:	0859      	lsrs	r1, r3, #1
 8000a70:	460b      	mov	r3, r1
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	440b      	add	r3, r1
 8000a76:	1ad3      	subs	r3, r2, r3
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	4b9a      	ldr	r3, [pc, #616]	; (8000ce4 <fsm_for_modify+0x2d0>)
 8000a7c:	701a      	strb	r2, [r3, #0]
					setTimer(24, 2);
 8000a7e:	2102      	movs	r1, #2
 8000a80:	2018      	movs	r0, #24
 8000a82:	f000 fb1b 	bl	80010bc <setTimer>
				}

				if(timer_flag[0]){
 8000a86:	4b95      	ldr	r3, [pc, #596]	; (8000cdc <fsm_for_modify+0x2c8>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d007      	beq.n	8000a9e <fsm_for_modify+0x8a>
					HAL_GPIO_TogglePin(GPIOB, R1_RED_Pin | R2_RED_Pin);	//Red Leds blink every 0.5 sec
 8000a8e:	2148      	movs	r1, #72	; 0x48
 8000a90:	4896      	ldr	r0, [pc, #600]	; (8000cec <fsm_for_modify+0x2d8>)
 8000a92:	f000 fe92 	bl	80017ba <HAL_GPIO_TogglePin>
					setTimer(50, 0);
 8000a96:	2100      	movs	r1, #0
 8000a98:	2032      	movs	r0, #50	; 0x32
 8000a9a:	f000 fb0f 	bl	80010bc <setTimer>
				}

				if(is_Pressed(BUTTON1)){								//If BUTTON1 is pressed, change to MODIFY_YELLOW state
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff fb64 	bl	800016c <is_Pressed>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d008      	beq.n	8000abc <fsm_for_modify+0xa8>
					status = MODIFY_YELLOW;
 8000aaa:	4b8b      	ldr	r3, [pc, #556]	; (8000cd8 <fsm_for_modify+0x2c4>)
 8000aac:	220d      	movs	r2, #13
 8000aae:	801a      	strh	r2, [r3, #0]
					write_led(R1_RED_Pin, R2_RED_Pin, 1);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2140      	movs	r1, #64	; 0x40
 8000ab4:	2008      	movs	r0, #8
 8000ab6:	f7ff fd85 	bl	80005c4 <write_led>
					break;
 8000aba:	e122      	b.n	8000d02 <fsm_for_modify+0x2ee>
				}

				if(is_Pressed(BUTTON3)){								//If BUTTON3 is pressed, RED LEDs' duration = modify_val
 8000abc:	2002      	movs	r0, #2
 8000abe:	f7ff fb55 	bl	800016c <is_Pressed>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	f000 8100 	beq.w	8000cca <fsm_for_modify+0x2b6>
					led_duration[RED_DURA] = modify_val;
 8000aca:	4b89      	ldr	r3, [pc, #548]	; (8000cf0 <fsm_for_modify+0x2dc>)
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b88      	ldr	r3, [pc, #544]	; (8000cf4 <fsm_for_modify+0x2e0>)
 8000ad2:	701a      	strb	r2, [r3, #0]
				}
				break;
 8000ad4:	e0f9      	b.n	8000cca <fsm_for_modify+0x2b6>
			case MODIFY_YELLOW:
				if(timer_flag[2]) {
 8000ad6:	4b81      	ldr	r3, [pc, #516]	; (8000cdc <fsm_for_modify+0x2c8>)
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d01c      	beq.n	8000b18 <fsm_for_modify+0x104>
					scan7SEG(mode, segth++);					//Display modified value and number of MODE
 8000ade:	4b80      	ldr	r3, [pc, #512]	; (8000ce0 <fsm_for_modify+0x2cc>)
 8000ae0:	781a      	ldrb	r2, [r3, #0]
 8000ae2:	4b80      	ldr	r3, [pc, #512]	; (8000ce4 <fsm_for_modify+0x2d0>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	1c59      	adds	r1, r3, #1
 8000ae8:	b2c8      	uxtb	r0, r1
 8000aea:	497e      	ldr	r1, [pc, #504]	; (8000ce4 <fsm_for_modify+0x2d0>)
 8000aec:	7008      	strb	r0, [r1, #0]
 8000aee:	4619      	mov	r1, r3
 8000af0:	4610      	mov	r0, r2
 8000af2:	f7ff fc4f 	bl	8000394 <scan7SEG>
					segth %= 3;
 8000af6:	4b7b      	ldr	r3, [pc, #492]	; (8000ce4 <fsm_for_modify+0x2d0>)
 8000af8:	781a      	ldrb	r2, [r3, #0]
 8000afa:	4b7b      	ldr	r3, [pc, #492]	; (8000ce8 <fsm_for_modify+0x2d4>)
 8000afc:	fba3 1302 	umull	r1, r3, r3, r2
 8000b00:	0859      	lsrs	r1, r3, #1
 8000b02:	460b      	mov	r3, r1
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	440b      	add	r3, r1
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	4b75      	ldr	r3, [pc, #468]	; (8000ce4 <fsm_for_modify+0x2d0>)
 8000b0e:	701a      	strb	r2, [r3, #0]
					setTimer(24, 2);
 8000b10:	2102      	movs	r1, #2
 8000b12:	2018      	movs	r0, #24
 8000b14:	f000 fad2 	bl	80010bc <setTimer>
				}

				if(timer_flag[0]){
 8000b18:	4b70      	ldr	r3, [pc, #448]	; (8000cdc <fsm_for_modify+0x2c8>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d007      	beq.n	8000b30 <fsm_for_modify+0x11c>
					HAL_GPIO_TogglePin(GPIOB, R1_YELLOW_Pin | R2_YELLOW_Pin);
 8000b20:	2190      	movs	r1, #144	; 0x90
 8000b22:	4872      	ldr	r0, [pc, #456]	; (8000cec <fsm_for_modify+0x2d8>)
 8000b24:	f000 fe49 	bl	80017ba <HAL_GPIO_TogglePin>
					setTimer(50, 0);
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2032      	movs	r0, #50	; 0x32
 8000b2c:	f000 fac6 	bl	80010bc <setTimer>
				}

				if(is_Pressed(BUTTON1)){
 8000b30:	2000      	movs	r0, #0
 8000b32:	f7ff fb1b 	bl	800016c <is_Pressed>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d008      	beq.n	8000b4e <fsm_for_modify+0x13a>
					status = MODIFY_GREEN;
 8000b3c:	4b66      	ldr	r3, [pc, #408]	; (8000cd8 <fsm_for_modify+0x2c4>)
 8000b3e:	220e      	movs	r2, #14
 8000b40:	801a      	strh	r2, [r3, #0]
					write_led(R1_YELLOW_Pin, R2_YELLOW_Pin, 1);
 8000b42:	2201      	movs	r2, #1
 8000b44:	2180      	movs	r1, #128	; 0x80
 8000b46:	2010      	movs	r0, #16
 8000b48:	f7ff fd3c 	bl	80005c4 <write_led>
					break;
 8000b4c:	e0d9      	b.n	8000d02 <fsm_for_modify+0x2ee>
				}

				if(is_Pressed(BUTTON3)){
 8000b4e:	2002      	movs	r0, #2
 8000b50:	f7ff fb0c 	bl	800016c <is_Pressed>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	f000 80b9 	beq.w	8000cce <fsm_for_modify+0x2ba>
					led_duration[YELLOW_DURA] = modify_val;
 8000b5c:	4b64      	ldr	r3, [pc, #400]	; (8000cf0 <fsm_for_modify+0x2dc>)
 8000b5e:	881b      	ldrh	r3, [r3, #0]
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4b64      	ldr	r3, [pc, #400]	; (8000cf4 <fsm_for_modify+0x2e0>)
 8000b64:	705a      	strb	r2, [r3, #1]
				}
				break;
 8000b66:	e0b2      	b.n	8000cce <fsm_for_modify+0x2ba>
			case MODIFY_GREEN:
				if(timer_flag[2]) {
 8000b68:	4b5c      	ldr	r3, [pc, #368]	; (8000cdc <fsm_for_modify+0x2c8>)
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d01c      	beq.n	8000baa <fsm_for_modify+0x196>
					scan7SEG(mode, segth++);					//Display modified value and number of MODE
 8000b70:	4b5b      	ldr	r3, [pc, #364]	; (8000ce0 <fsm_for_modify+0x2cc>)
 8000b72:	781a      	ldrb	r2, [r3, #0]
 8000b74:	4b5b      	ldr	r3, [pc, #364]	; (8000ce4 <fsm_for_modify+0x2d0>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	1c59      	adds	r1, r3, #1
 8000b7a:	b2c8      	uxtb	r0, r1
 8000b7c:	4959      	ldr	r1, [pc, #356]	; (8000ce4 <fsm_for_modify+0x2d0>)
 8000b7e:	7008      	strb	r0, [r1, #0]
 8000b80:	4619      	mov	r1, r3
 8000b82:	4610      	mov	r0, r2
 8000b84:	f7ff fc06 	bl	8000394 <scan7SEG>
					segth %= 3;
 8000b88:	4b56      	ldr	r3, [pc, #344]	; (8000ce4 <fsm_for_modify+0x2d0>)
 8000b8a:	781a      	ldrb	r2, [r3, #0]
 8000b8c:	4b56      	ldr	r3, [pc, #344]	; (8000ce8 <fsm_for_modify+0x2d4>)
 8000b8e:	fba3 1302 	umull	r1, r3, r3, r2
 8000b92:	0859      	lsrs	r1, r3, #1
 8000b94:	460b      	mov	r3, r1
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	440b      	add	r3, r1
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4b51      	ldr	r3, [pc, #324]	; (8000ce4 <fsm_for_modify+0x2d0>)
 8000ba0:	701a      	strb	r2, [r3, #0]
					setTimer(24, 2);
 8000ba2:	2102      	movs	r1, #2
 8000ba4:	2018      	movs	r0, #24
 8000ba6:	f000 fa89 	bl	80010bc <setTimer>
				}

				if(timer_flag[0]){
 8000baa:	4b4c      	ldr	r3, [pc, #304]	; (8000cdc <fsm_for_modify+0x2c8>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d008      	beq.n	8000bc4 <fsm_for_modify+0x1b0>
					HAL_GPIO_TogglePin(GPIOB, R1_GREEN_Pin | R2_GREEN_Pin);
 8000bb2:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000bb6:	484d      	ldr	r0, [pc, #308]	; (8000cec <fsm_for_modify+0x2d8>)
 8000bb8:	f000 fdff 	bl	80017ba <HAL_GPIO_TogglePin>
					setTimer(50, 0);
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	2032      	movs	r0, #50	; 0x32
 8000bc0:	f000 fa7c 	bl	80010bc <setTimer>
				}

				if(is_Pressed(BUTTON1)){
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f7ff fad1 	bl	800016c <is_Pressed>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d049      	beq.n	8000c64 <fsm_for_modify+0x250>
					status = RED_GREEN;
 8000bd0:	4b41      	ldr	r3, [pc, #260]	; (8000cd8 <fsm_for_modify+0x2c4>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	801a      	strh	r2, [r3, #0]
					write_led(R1_GREEN_Pin, R2_GREEN_Pin, 1);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bdc:	2020      	movs	r0, #32
 8000bde:	f7ff fcf1 	bl	80005c4 <write_led>
					mode = 0;
 8000be2:	4b3f      	ldr	r3, [pc, #252]	; (8000ce0 <fsm_for_modify+0x2cc>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]

					if(led_duration[RED_DURA] != led_duration[GREEN_DURA] + led_duration[YELLOW_DURA]){
 8000be8:	4b42      	ldr	r3, [pc, #264]	; (8000cf4 <fsm_for_modify+0x2e0>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b41      	ldr	r3, [pc, #260]	; (8000cf4 <fsm_for_modify+0x2e0>)
 8000bf0:	789b      	ldrb	r3, [r3, #2]
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4b3f      	ldr	r3, [pc, #252]	; (8000cf4 <fsm_for_modify+0x2e0>)
 8000bf6:	785b      	ldrb	r3, [r3, #1]
 8000bf8:	440b      	add	r3, r1
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d00f      	beq.n	8000c1e <fsm_for_modify+0x20a>
						led_duration[RED_DURA] = INIT_RED_DURA;			//if red_duration != yellow_duration + green_duration
 8000bfe:	4b3d      	ldr	r3, [pc, #244]	; (8000cf4 <fsm_for_modify+0x2e0>)
 8000c00:	2205      	movs	r2, #5
 8000c02:	701a      	strb	r2, [r3, #0]
						led_duration[YELLOW_DURA] = INIT_YELLOW_DURA;	//set all led duration to init_duration
 8000c04:	4b3b      	ldr	r3, [pc, #236]	; (8000cf4 <fsm_for_modify+0x2e0>)
 8000c06:	2202      	movs	r2, #2
 8000c08:	705a      	strb	r2, [r3, #1]
						led_duration[GREEN_DURA] = INIT_GREEN_DURA;		//and change to state INIT
 8000c0a:	4b3a      	ldr	r3, [pc, #232]	; (8000cf4 <fsm_for_modify+0x2e0>)
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	709a      	strb	r2, [r3, #2]
						status = ERR;
 8000c10:	4b31      	ldr	r3, [pc, #196]	; (8000cd8 <fsm_for_modify+0x2c4>)
 8000c12:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c16:	801a      	strh	r2, [r3, #0]
						mode = 1;
 8000c18:	4b31      	ldr	r3, [pc, #196]	; (8000ce0 <fsm_for_modify+0x2cc>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	701a      	strb	r2, [r3, #0]
					}

					++led_count1;
 8000c1e:	4b36      	ldr	r3, [pc, #216]	; (8000cf8 <fsm_for_modify+0x2e4>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	3301      	adds	r3, #1
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4b34      	ldr	r3, [pc, #208]	; (8000cf8 <fsm_for_modify+0x2e4>)
 8000c28:	701a      	strb	r2, [r3, #0]
					++led_count2;
 8000c2a:	4b34      	ldr	r3, [pc, #208]	; (8000cfc <fsm_for_modify+0x2e8>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4b32      	ldr	r3, [pc, #200]	; (8000cfc <fsm_for_modify+0x2e8>)
 8000c34:	701a      	strb	r2, [r3, #0]
					led_count1 = led_duration[RED_DURA];
 8000c36:	4b2f      	ldr	r3, [pc, #188]	; (8000cf4 <fsm_for_modify+0x2e0>)
 8000c38:	781a      	ldrb	r2, [r3, #0]
 8000c3a:	4b2f      	ldr	r3, [pc, #188]	; (8000cf8 <fsm_for_modify+0x2e4>)
 8000c3c:	701a      	strb	r2, [r3, #0]
					led_count2 = led_duration[GREEN_DURA];
 8000c3e:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <fsm_for_modify+0x2e0>)
 8000c40:	789a      	ldrb	r2, [r3, #2]
 8000c42:	4b2e      	ldr	r3, [pc, #184]	; (8000cfc <fsm_for_modify+0x2e8>)
 8000c44:	701a      	strb	r2, [r3, #0]

					setTimer(led_duration[GREEN_DURA] * 100, 1);
 8000c46:	4b2b      	ldr	r3, [pc, #172]	; (8000cf4 <fsm_for_modify+0x2e0>)
 8000c48:	789b      	ldrb	r3, [r3, #2]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	2364      	movs	r3, #100	; 0x64
 8000c4e:	fb03 f302 	mul.w	r3, r3, r2
 8000c52:	2101      	movs	r1, #1
 8000c54:	4618      	mov	r0, r3
 8000c56:	f000 fa31 	bl	80010bc <setTimer>
					setTimer(100, 0);
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	2064      	movs	r0, #100	; 0x64
 8000c5e:	f000 fa2d 	bl	80010bc <setTimer>
					break;
 8000c62:	e04e      	b.n	8000d02 <fsm_for_modify+0x2ee>
				}

				if(is_Pressed(BUTTON3)){
 8000c64:	2002      	movs	r0, #2
 8000c66:	f7ff fa81 	bl	800016c <is_Pressed>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d030      	beq.n	8000cd2 <fsm_for_modify+0x2be>
					led_duration[GREEN_DURA] = modify_val;
 8000c70:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <fsm_for_modify+0x2dc>)
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <fsm_for_modify+0x2e0>)
 8000c78:	709a      	strb	r2, [r3, #2]
				}
				break;
 8000c7a:	e02a      	b.n	8000cd2 <fsm_for_modify+0x2be>
			case ERR:							//ERR state
				if(timer_flag[2]) {
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <fsm_for_modify+0x2c8>)
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d009      	beq.n	8000c98 <fsm_for_modify+0x284>
					scan7SEG(mode, 10);		//Display letter 'E'
 8000c84:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <fsm_for_modify+0x2cc>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	210a      	movs	r1, #10
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fb82 	bl	8000394 <scan7SEG>
					setTimer(24, 2);
 8000c90:	2102      	movs	r1, #2
 8000c92:	2018      	movs	r0, #24
 8000c94:	f000 fa12 	bl	80010bc <setTimer>
				}

				if(timer_flag[0]) {
 8000c98:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <fsm_for_modify+0x2c8>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d02f      	beq.n	8000d00 <fsm_for_modify+0x2ec>
					status = INIT;
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <fsm_for_modify+0x2c4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	801a      	strh	r2, [r3, #0]
					mode = 0;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <fsm_for_modify+0x2cc>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
					setTimer(led_duration[GREEN_DURA] * 100, 1);
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <fsm_for_modify+0x2e0>)
 8000cae:	789b      	ldrb	r3, [r3, #2]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	2364      	movs	r3, #100	; 0x64
 8000cb4:	fb03 f302 	mul.w	r3, r3, r2
 8000cb8:	2101      	movs	r1, #1
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 f9fe 	bl	80010bc <setTimer>
					setTimer(100, 0);
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2064      	movs	r0, #100	; 0x64
 8000cc4:	f000 f9fa 	bl	80010bc <setTimer>
				}
				break;
 8000cc8:	e01a      	b.n	8000d00 <fsm_for_modify+0x2ec>
				break;
 8000cca:	bf00      	nop
 8000ccc:	e019      	b.n	8000d02 <fsm_for_modify+0x2ee>
				break;
 8000cce:	bf00      	nop
 8000cd0:	e017      	b.n	8000d02 <fsm_for_modify+0x2ee>
				break;
 8000cd2:	bf00      	nop
 8000cd4:	e015      	b.n	8000d02 <fsm_for_modify+0x2ee>
 8000cd6:	bf00      	nop
 8000cd8:	20000080 	.word	0x20000080
 8000cdc:	20000090 	.word	0x20000090
 8000ce0:	20000082 	.word	0x20000082
 8000ce4:	20000083 	.word	0x20000083
 8000ce8:	aaaaaaab 	.word	0xaaaaaaab
 8000cec:	40010c00 	.word	0x40010c00
 8000cf0:	20000034 	.word	0x20000034
 8000cf4:	20000038 	.word	0x20000038
 8000cf8:	2000003b 	.word	0x2000003b
 8000cfc:	2000003c 	.word	0x2000003c
				break;
 8000d00:	bf00      	nop
		}
	if(is_Pressed(BUTTON2) && mode == 1){					//If BUTTON2 is pressed, increase modify_val by 1
 8000d02:	2001      	movs	r0, #1
 8000d04:	f7ff fa32 	bl	800016c <is_Pressed>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d010      	beq.n	8000d30 <fsm_for_modify+0x31c>
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <fsm_for_modify+0x320>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d10c      	bne.n	8000d30 <fsm_for_modify+0x31c>
		++modify_val;
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <fsm_for_modify+0x324>)
 8000d18:	881b      	ldrh	r3, [r3, #0]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <fsm_for_modify+0x324>)
 8000d20:	801a      	strh	r2, [r3, #0]
		if(modify_val == 100) modify_val = 1;
 8000d22:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <fsm_for_modify+0x324>)
 8000d24:	881b      	ldrh	r3, [r3, #0]
 8000d26:	2b64      	cmp	r3, #100	; 0x64
 8000d28:	d102      	bne.n	8000d30 <fsm_for_modify+0x31c>
 8000d2a:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <fsm_for_modify+0x324>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	801a      	strh	r2, [r3, #0]
	}

}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000082 	.word	0x20000082
 8000d38:	20000034 	.word	0x20000034

08000d3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d40:	f000 fa22 	bl	8001188 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d44:	f000 f820 	bl	8000d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d48:	f000 f8a6 	bl	8000e98 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d4c:	f000 f858 	bl	8000e00 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000d50:	480b      	ldr	r0, [pc, #44]	; (8000d80 <main+0x44>)
 8000d52:	f001 f977 	bl	8002044 <HAL_TIM_Base_Start_IT>
//  int led = 1;

//  HAL_GPIO_WritePin(GPIOA, A5_Pin, 1);
  //HAL_GPIO_WritePin(GPIOB, BUTTON1_Pin, 1);

setTimer(50, 0);
 8000d56:	2100      	movs	r1, #0
 8000d58:	2032      	movs	r0, #50	; 0x32
 8000d5a:	f000 f9af 	bl	80010bc <setTimer>
setTimer(100, 1);
 8000d5e:	2101      	movs	r1, #1
 8000d60:	2064      	movs	r0, #100	; 0x64
 8000d62:	f000 f9ab 	bl	80010bc <setTimer>
setTimer(24, 2);
 8000d66:	2102      	movs	r1, #2
 8000d68:	2018      	movs	r0, #24
 8000d6a:	f000 f9a7 	bl	80010bc <setTimer>
status = INIT;
 8000d6e:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <main+0x48>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	801a      	strh	r2, [r3, #0]
//	  HAL_GPIO_TogglePin(SEG1_GPIO_Port, R1_A_Pin);
//
//	  HAL_GPIO_TogglePin(GPIOB, R1_RED_Pin);
//	  HAL_Delay(250);
//	  if(timer_flag[0]){
	  fsm_for_normal();
 8000d74:	f7ff fc42 	bl	80005fc <fsm_for_normal>
	  fsm_for_modify();
 8000d78:	f7ff fe4c 	bl	8000a14 <fsm_for_modify>
	  fsm_for_normal();
 8000d7c:	e7fa      	b.n	8000d74 <main+0x38>
 8000d7e:	bf00      	nop
 8000d80:	2000009c 	.word	0x2000009c
 8000d84:	20000080 	.word	0x20000080

08000d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b090      	sub	sp, #64	; 0x40
 8000d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8e:	f107 0318 	add.w	r3, r7, #24
 8000d92:	2228      	movs	r2, #40	; 0x28
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f001 fd10 	bl	80027bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000daa:	2302      	movs	r3, #2
 8000dac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dae:	2301      	movs	r3, #1
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000db2:	2310      	movs	r3, #16
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dba:	f107 0318 	add.w	r3, r7, #24
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 fd14 	bl	80017ec <HAL_RCC_OscConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000dca:	f000 f8e4 	bl	8000f96 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dce:	230f      	movs	r3, #15
 8000dd0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2100      	movs	r1, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 ff80 	bl	8001cec <HAL_RCC_ClockConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000df2:	f000 f8d0 	bl	8000f96 <Error_Handler>
  }
}
 8000df6:	bf00      	nop
 8000df8:	3740      	adds	r7, #64	; 0x40
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e06:	f107 0308 	add.w	r3, r7, #8
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e14:	463b      	mov	r3, r7
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e26:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2c:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e34:	2209      	movs	r2, #9
 8000e36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e44:	4813      	ldr	r0, [pc, #76]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e46:	f001 f8ad 	bl	8001fa4 <HAL_TIM_Base_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e50:	f000 f8a1 	bl	8000f96 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	4619      	mov	r1, r3
 8000e60:	480c      	ldr	r0, [pc, #48]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e62:	f001 fa43 	bl	80022ec <HAL_TIM_ConfigClockSource>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e6c:	f000 f893 	bl	8000f96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e70:	2300      	movs	r3, #0
 8000e72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e78:	463b      	mov	r3, r7
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4805      	ldr	r0, [pc, #20]	; (8000e94 <MX_TIM2_Init+0x94>)
 8000e7e:	f001 fc0f 	bl	80026a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e88:	f000 f885 	bl	8000f96 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e8c:	bf00      	nop
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	2000009c 	.word	0x2000009c

08000e98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9e:	f107 0308 	add.w	r3, r7, #8
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eac:	4b28      	ldr	r3, [pc, #160]	; (8000f50 <MX_GPIO_Init+0xb8>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	4a27      	ldr	r2, [pc, #156]	; (8000f50 <MX_GPIO_Init+0xb8>)
 8000eb2:	f043 0304 	orr.w	r3, r3, #4
 8000eb6:	6193      	str	r3, [r2, #24]
 8000eb8:	4b25      	ldr	r3, [pc, #148]	; (8000f50 <MX_GPIO_Init+0xb8>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	f003 0304 	and.w	r3, r3, #4
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec4:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <MX_GPIO_Init+0xb8>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	4a21      	ldr	r2, [pc, #132]	; (8000f50 <MX_GPIO_Init+0xb8>)
 8000eca:	f043 0308 	orr.w	r3, r3, #8
 8000ece:	6193      	str	r3, [r2, #24]
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <MX_GPIO_Init+0xb8>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	f003 0308 	and.w	r3, r3, #8
 8000ed8:	603b      	str	r3, [r7, #0]
 8000eda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG4_Pin
 8000edc:	2200      	movs	r2, #0
 8000ede:	f64f 6178 	movw	r1, #65144	; 0xfe78
 8000ee2:	481c      	ldr	r0, [pc, #112]	; (8000f54 <MX_GPIO_Init+0xbc>)
 8000ee4:	f000 fc51 	bl	800178a <HAL_GPIO_WritePin>
                          |R1_A_Pin|R1_B_Pin|R1_C_Pin|R1_D_Pin
                          |R1_E_Pin|R1_F_Pin|R1_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R1_RED_Pin|R1_YELLOW_Pin|R1_GREEN_Pin|R2_RED_Pin
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8000eee:	481a      	ldr	r0, [pc, #104]	; (8000f58 <MX_GPIO_Init+0xc0>)
 8000ef0:	f000 fc4b 	bl	800178a <HAL_GPIO_WritePin>
                          |R2_YELLOW_Pin|R2_GREEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEG1_Pin SEG2_Pin SEG3_Pin SEG4_Pin
                           R1_A_Pin R1_B_Pin R1_C_Pin R1_D_Pin
                           R1_E_Pin R1_F_Pin R1_G_Pin */
  GPIO_InitStruct.Pin = SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG4_Pin
 8000ef4:	f64f 6378 	movw	r3, #65144	; 0xfe78
 8000ef8:	60bb      	str	r3, [r7, #8]
                          |R1_A_Pin|R1_B_Pin|R1_C_Pin|R1_D_Pin
                          |R1_E_Pin|R1_F_Pin|R1_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2302      	movs	r3, #2
 8000f04:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 0308 	add.w	r3, r7, #8
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4811      	ldr	r0, [pc, #68]	; (8000f54 <MX_GPIO_Init+0xbc>)
 8000f0e:	f000 faab 	bl	8001468 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8000f12:	2307      	movs	r3, #7
 8000f14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1e:	f107 0308 	add.w	r3, r7, #8
 8000f22:	4619      	mov	r1, r3
 8000f24:	480c      	ldr	r0, [pc, #48]	; (8000f58 <MX_GPIO_Init+0xc0>)
 8000f26:	f000 fa9f 	bl	8001468 <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_RED_Pin R1_YELLOW_Pin R1_GREEN_Pin R2_RED_Pin
                           R2_YELLOW_Pin R2_GREEN_Pin */
  GPIO_InitStruct.Pin = R1_RED_Pin|R1_YELLOW_Pin|R1_GREEN_Pin|R2_RED_Pin
 8000f2a:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000f2e:	60bb      	str	r3, [r7, #8]
                          |R2_YELLOW_Pin|R2_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f30:	2301      	movs	r3, #1
 8000f32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3c:	f107 0308 	add.w	r3, r7, #8
 8000f40:	4619      	mov	r1, r3
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_GPIO_Init+0xc0>)
 8000f44:	f000 fa90 	bl	8001468 <HAL_GPIO_Init>

}
 8000f48:	bf00      	nop
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40021000 	.word	0x40021000
 8000f54:	40010800 	.word	0x40010800
 8000f58:	40010c00 	.word	0x40010c00

08000f5c <HAL_TIM_PeriodElapsedCallback>:
//		  counter = 100;
//		  HAL_GPIO_TogglePin(GPIOA, R1_RED_Pin);
//	  }
//  }

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
//	timerRun();
	timerRun(0);
 8000f64:	2000      	movs	r0, #0
 8000f66:	f000 f8c1 	bl	80010ec <timerRun>
	timerRun(1);
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f000 f8be 	bl	80010ec <timerRun>
	timerRun(2);
 8000f70:	2002      	movs	r0, #2
 8000f72:	f000 f8bb 	bl	80010ec <timerRun>
	getKeyInput(BUTTON1, BUTTON1_Pin);
 8000f76:	2101      	movs	r1, #1
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f7ff f911 	bl	80001a0 <getKeyInput>
	getKeyInput(BUTTON2, BUTTON2_Pin);
 8000f7e:	2102      	movs	r1, #2
 8000f80:	2001      	movs	r0, #1
 8000f82:	f7ff f90d 	bl	80001a0 <getKeyInput>
	getKeyInput(BUTTON3, BUTTON3_Pin);
 8000f86:	2104      	movs	r1, #4
 8000f88:	2002      	movs	r0, #2
 8000f8a:	f7ff f909 	bl	80001a0 <getKeyInput>
	//		  button_reading () ;
	//}
	//	  timerRun(LED);
	//	  timerRun(SEG);
	//	  timerRun(MATRIX);
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f9a:	b672      	cpsid	i
}
 8000f9c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <Error_Handler+0x8>

08000fa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <HAL_MspInit+0x5c>)
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	4a14      	ldr	r2, [pc, #80]	; (8000ffc <HAL_MspInit+0x5c>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6193      	str	r3, [r2, #24]
 8000fb2:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <HAL_MspInit+0x5c>)
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <HAL_MspInit+0x5c>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <HAL_MspInit+0x5c>)
 8000fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc8:	61d3      	str	r3, [r2, #28]
 8000fca:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <HAL_MspInit+0x5c>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <HAL_MspInit+0x60>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_MspInit+0x60>)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr
 8000ffc:	40021000 	.word	0x40021000
 8001000:	40010000 	.word	0x40010000

08001004 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001014:	d113      	bne.n	800103e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <HAL_TIM_Base_MspInit+0x44>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <HAL_TIM_Base_MspInit+0x44>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	61d3      	str	r3, [r2, #28]
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <HAL_TIM_Base_MspInit+0x44>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	201c      	movs	r0, #28
 8001034:	f000 f9e1 	bl	80013fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001038:	201c      	movs	r0, #28
 800103a:	f000 f9fa 	bl	8001432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40021000 	.word	0x40021000

0800104c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <NMI_Handler+0x4>

08001052 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001056:	e7fe      	b.n	8001056 <HardFault_Handler+0x4>

08001058 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800105c:	e7fe      	b.n	800105c <MemManage_Handler+0x4>

0800105e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001062:	e7fe      	b.n	8001062 <BusFault_Handler+0x4>

08001064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <UsageFault_Handler+0x4>

0800106a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr

08001076 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr

08001082 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr

0800108e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001092:	f000 f8bf 	bl	8001214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <TIM2_IRQHandler+0x10>)
 80010a2:	f001 f81b 	bl	80020dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	2000009c 	.word	0x2000009c

080010b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr

080010bc <setTimer>:
//# include "input_reading.h"

int timer_counter[3] = {0, 0, 0};
int timer_flag[3] = {0, 0, 0};

void setTimer(int duration, int id){
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
	timer_counter[id] = duration;
 80010c6:	4907      	ldr	r1, [pc, #28]	; (80010e4 <setTimer+0x28>)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[id] = 0;
 80010d0:	4a05      	ldr	r2, [pc, #20]	; (80010e8 <setTimer+0x2c>)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	2100      	movs	r1, #0
 80010d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr
 80010e4:	20000084 	.word	0x20000084
 80010e8:	20000090 	.word	0x20000090

080010ec <timerRun>:

void timerRun(int id){
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	if(timer_counter[id] > 0){
 80010f4:	4a0f      	ldr	r2, [pc, #60]	; (8001134 <timerRun+0x48>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	dd13      	ble.n	8001128 <timerRun+0x3c>
		timer_counter[id]--;
 8001100:	4a0c      	ldr	r2, [pc, #48]	; (8001134 <timerRun+0x48>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001108:	1e5a      	subs	r2, r3, #1
 800110a:	490a      	ldr	r1, [pc, #40]	; (8001134 <timerRun+0x48>)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[id] <= 0){
 8001112:	4a08      	ldr	r2, [pc, #32]	; (8001134 <timerRun+0x48>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111a:	2b00      	cmp	r3, #0
 800111c:	dc04      	bgt.n	8001128 <timerRun+0x3c>
			timer_flag[id] = 1;
 800111e:	4a06      	ldr	r2, [pc, #24]	; (8001138 <timerRun+0x4c>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2101      	movs	r1, #1
 8001124:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000084 	.word	0x20000084
 8001138:	20000090 	.word	0x20000090

0800113c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800113c:	f7ff ffb8 	bl	80010b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001140:	480b      	ldr	r0, [pc, #44]	; (8001170 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001142:	490c      	ldr	r1, [pc, #48]	; (8001174 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001144:	4a0c      	ldr	r2, [pc, #48]	; (8001178 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001148:	e002      	b.n	8001150 <LoopCopyDataInit>

0800114a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800114c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114e:	3304      	adds	r3, #4

08001150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001154:	d3f9      	bcc.n	800114a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001156:	4a09      	ldr	r2, [pc, #36]	; (800117c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001158:	4c09      	ldr	r4, [pc, #36]	; (8001180 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800115c:	e001      	b.n	8001162 <LoopFillZerobss>

0800115e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001160:	3204      	adds	r2, #4

08001162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001164:	d3fb      	bcc.n	800115e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001166:	f001 fb05 	bl	8002774 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800116a:	f7ff fde7 	bl	8000d3c <main>
  bx lr
 800116e:	4770      	bx	lr
  ldr r0, =_sdata
 8001170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001174:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001178:	08002810 	.word	0x08002810
  ldr r2, =_sbss
 800117c:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001180:	200000e8 	.word	0x200000e8

08001184 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001184:	e7fe      	b.n	8001184 <ADC1_2_IRQHandler>
	...

08001188 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <HAL_Init+0x28>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a07      	ldr	r2, [pc, #28]	; (80011b0 <HAL_Init+0x28>)
 8001192:	f043 0310 	orr.w	r3, r3, #16
 8001196:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001198:	2003      	movs	r0, #3
 800119a:	f000 f923 	bl	80013e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800119e:	200f      	movs	r0, #15
 80011a0:	f000 f808 	bl	80011b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a4:	f7ff fefc 	bl	8000fa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40022000 	.word	0x40022000

080011b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_InitTick+0x54>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_InitTick+0x58>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	4619      	mov	r1, r3
 80011c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 f93b 	bl	800144e <HAL_SYSTICK_Config>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e00e      	b.n	8001200 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b0f      	cmp	r3, #15
 80011e6:	d80a      	bhi.n	80011fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e8:	2200      	movs	r2, #0
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295
 80011f0:	f000 f903 	bl	80013fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f4:	4a06      	ldr	r2, [pc, #24]	; (8001210 <HAL_InitTick+0x5c>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	e000      	b.n	8001200 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	2000004c 	.word	0x2000004c
 800120c:	20000054 	.word	0x20000054
 8001210:	20000050 	.word	0x20000050

08001214 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <HAL_IncTick+0x1c>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4b05      	ldr	r3, [pc, #20]	; (8001234 <HAL_IncTick+0x20>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4413      	add	r3, r2
 8001224:	4a03      	ldr	r2, [pc, #12]	; (8001234 <HAL_IncTick+0x20>)
 8001226:	6013      	str	r3, [r2, #0]
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr
 8001230:	20000054 	.word	0x20000054
 8001234:	200000e4 	.word	0x200000e4

08001238 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b02      	ldr	r3, [pc, #8]	; (8001248 <HAL_GetTick+0x10>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr
 8001248:	200000e4 	.word	0x200000e4

0800124c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001268:	4013      	ands	r3, r2
 800126a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800127c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127e:	4a04      	ldr	r2, [pc, #16]	; (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	60d3      	str	r3, [r2, #12]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <__NVIC_GetPriorityGrouping+0x18>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	0a1b      	lsrs	r3, r3, #8
 800129e:	f003 0307 	and.w	r3, r3, #7
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	db0b      	blt.n	80012da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	f003 021f 	and.w	r2, r3, #31
 80012c8:	4906      	ldr	r1, [pc, #24]	; (80012e4 <__NVIC_EnableIRQ+0x34>)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	095b      	lsrs	r3, r3, #5
 80012d0:	2001      	movs	r0, #1
 80012d2:	fa00 f202 	lsl.w	r2, r0, r2
 80012d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	e000e100 	.word	0xe000e100

080012e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	6039      	str	r1, [r7, #0]
 80012f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	db0a      	blt.n	8001312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	490c      	ldr	r1, [pc, #48]	; (8001334 <__NVIC_SetPriority+0x4c>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	0112      	lsls	r2, r2, #4
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	440b      	add	r3, r1
 800130c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001310:	e00a      	b.n	8001328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4908      	ldr	r1, [pc, #32]	; (8001338 <__NVIC_SetPriority+0x50>)
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	3b04      	subs	r3, #4
 8001320:	0112      	lsls	r2, r2, #4
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	440b      	add	r3, r1
 8001326:	761a      	strb	r2, [r3, #24]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000e100 	.word	0xe000e100
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800133c:	b480      	push	{r7}
 800133e:	b089      	sub	sp, #36	; 0x24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f1c3 0307 	rsb	r3, r3, #7
 8001356:	2b04      	cmp	r3, #4
 8001358:	bf28      	it	cs
 800135a:	2304      	movcs	r3, #4
 800135c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3304      	adds	r3, #4
 8001362:	2b06      	cmp	r3, #6
 8001364:	d902      	bls.n	800136c <NVIC_EncodePriority+0x30>
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3b03      	subs	r3, #3
 800136a:	e000      	b.n	800136e <NVIC_EncodePriority+0x32>
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	f04f 32ff 	mov.w	r2, #4294967295
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43da      	mvns	r2, r3
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	401a      	ands	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001384:	f04f 31ff 	mov.w	r1, #4294967295
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	fa01 f303 	lsl.w	r3, r1, r3
 800138e:	43d9      	mvns	r1, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001394:	4313      	orrs	r3, r2
         );
}
 8001396:	4618      	mov	r0, r3
 8001398:	3724      	adds	r7, #36	; 0x24
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b0:	d301      	bcc.n	80013b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013b2:	2301      	movs	r3, #1
 80013b4:	e00f      	b.n	80013d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b6:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <SysTick_Config+0x40>)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013be:	210f      	movs	r1, #15
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295
 80013c4:	f7ff ff90 	bl	80012e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <SysTick_Config+0x40>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ce:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <SysTick_Config+0x40>)
 80013d0:	2207      	movs	r2, #7
 80013d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	e000e010 	.word	0xe000e010

080013e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff ff2d 	bl	800124c <__NVIC_SetPriorityGrouping>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b086      	sub	sp, #24
 80013fe:	af00      	add	r7, sp, #0
 8001400:	4603      	mov	r3, r0
 8001402:	60b9      	str	r1, [r7, #8]
 8001404:	607a      	str	r2, [r7, #4]
 8001406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800140c:	f7ff ff42 	bl	8001294 <__NVIC_GetPriorityGrouping>
 8001410:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	68b9      	ldr	r1, [r7, #8]
 8001416:	6978      	ldr	r0, [r7, #20]
 8001418:	f7ff ff90 	bl	800133c <NVIC_EncodePriority>
 800141c:	4602      	mov	r2, r0
 800141e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001422:	4611      	mov	r1, r2
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff5f 	bl	80012e8 <__NVIC_SetPriority>
}
 800142a:	bf00      	nop
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800143c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff35 	bl	80012b0 <__NVIC_EnableIRQ>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff ffa2 	bl	80013a0 <SysTick_Config>
 800145c:	4603      	mov	r3, r0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001468:	b480      	push	{r7}
 800146a:	b08b      	sub	sp, #44	; 0x2c
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800147a:	e148      	b.n	800170e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800147c:	2201      	movs	r2, #1
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	69fa      	ldr	r2, [r7, #28]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	429a      	cmp	r2, r3
 8001496:	f040 8137 	bne.w	8001708 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	4aa3      	ldr	r2, [pc, #652]	; (800172c <HAL_GPIO_Init+0x2c4>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d05e      	beq.n	8001562 <HAL_GPIO_Init+0xfa>
 80014a4:	4aa1      	ldr	r2, [pc, #644]	; (800172c <HAL_GPIO_Init+0x2c4>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d875      	bhi.n	8001596 <HAL_GPIO_Init+0x12e>
 80014aa:	4aa1      	ldr	r2, [pc, #644]	; (8001730 <HAL_GPIO_Init+0x2c8>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d058      	beq.n	8001562 <HAL_GPIO_Init+0xfa>
 80014b0:	4a9f      	ldr	r2, [pc, #636]	; (8001730 <HAL_GPIO_Init+0x2c8>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d86f      	bhi.n	8001596 <HAL_GPIO_Init+0x12e>
 80014b6:	4a9f      	ldr	r2, [pc, #636]	; (8001734 <HAL_GPIO_Init+0x2cc>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d052      	beq.n	8001562 <HAL_GPIO_Init+0xfa>
 80014bc:	4a9d      	ldr	r2, [pc, #628]	; (8001734 <HAL_GPIO_Init+0x2cc>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d869      	bhi.n	8001596 <HAL_GPIO_Init+0x12e>
 80014c2:	4a9d      	ldr	r2, [pc, #628]	; (8001738 <HAL_GPIO_Init+0x2d0>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d04c      	beq.n	8001562 <HAL_GPIO_Init+0xfa>
 80014c8:	4a9b      	ldr	r2, [pc, #620]	; (8001738 <HAL_GPIO_Init+0x2d0>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d863      	bhi.n	8001596 <HAL_GPIO_Init+0x12e>
 80014ce:	4a9b      	ldr	r2, [pc, #620]	; (800173c <HAL_GPIO_Init+0x2d4>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d046      	beq.n	8001562 <HAL_GPIO_Init+0xfa>
 80014d4:	4a99      	ldr	r2, [pc, #612]	; (800173c <HAL_GPIO_Init+0x2d4>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d85d      	bhi.n	8001596 <HAL_GPIO_Init+0x12e>
 80014da:	2b12      	cmp	r3, #18
 80014dc:	d82a      	bhi.n	8001534 <HAL_GPIO_Init+0xcc>
 80014de:	2b12      	cmp	r3, #18
 80014e0:	d859      	bhi.n	8001596 <HAL_GPIO_Init+0x12e>
 80014e2:	a201      	add	r2, pc, #4	; (adr r2, 80014e8 <HAL_GPIO_Init+0x80>)
 80014e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e8:	08001563 	.word	0x08001563
 80014ec:	0800153d 	.word	0x0800153d
 80014f0:	0800154f 	.word	0x0800154f
 80014f4:	08001591 	.word	0x08001591
 80014f8:	08001597 	.word	0x08001597
 80014fc:	08001597 	.word	0x08001597
 8001500:	08001597 	.word	0x08001597
 8001504:	08001597 	.word	0x08001597
 8001508:	08001597 	.word	0x08001597
 800150c:	08001597 	.word	0x08001597
 8001510:	08001597 	.word	0x08001597
 8001514:	08001597 	.word	0x08001597
 8001518:	08001597 	.word	0x08001597
 800151c:	08001597 	.word	0x08001597
 8001520:	08001597 	.word	0x08001597
 8001524:	08001597 	.word	0x08001597
 8001528:	08001597 	.word	0x08001597
 800152c:	08001545 	.word	0x08001545
 8001530:	08001559 	.word	0x08001559
 8001534:	4a82      	ldr	r2, [pc, #520]	; (8001740 <HAL_GPIO_Init+0x2d8>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d013      	beq.n	8001562 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800153a:	e02c      	b.n	8001596 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	623b      	str	r3, [r7, #32]
          break;
 8001542:	e029      	b.n	8001598 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	3304      	adds	r3, #4
 800154a:	623b      	str	r3, [r7, #32]
          break;
 800154c:	e024      	b.n	8001598 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	3308      	adds	r3, #8
 8001554:	623b      	str	r3, [r7, #32]
          break;
 8001556:	e01f      	b.n	8001598 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	330c      	adds	r3, #12
 800155e:	623b      	str	r3, [r7, #32]
          break;
 8001560:	e01a      	b.n	8001598 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d102      	bne.n	8001570 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800156a:	2304      	movs	r3, #4
 800156c:	623b      	str	r3, [r7, #32]
          break;
 800156e:	e013      	b.n	8001598 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d105      	bne.n	8001584 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001578:	2308      	movs	r3, #8
 800157a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69fa      	ldr	r2, [r7, #28]
 8001580:	611a      	str	r2, [r3, #16]
          break;
 8001582:	e009      	b.n	8001598 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001584:	2308      	movs	r3, #8
 8001586:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69fa      	ldr	r2, [r7, #28]
 800158c:	615a      	str	r2, [r3, #20]
          break;
 800158e:	e003      	b.n	8001598 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
          break;
 8001594:	e000      	b.n	8001598 <HAL_GPIO_Init+0x130>
          break;
 8001596:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	2bff      	cmp	r3, #255	; 0xff
 800159c:	d801      	bhi.n	80015a2 <HAL_GPIO_Init+0x13a>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	e001      	b.n	80015a6 <HAL_GPIO_Init+0x13e>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3304      	adds	r3, #4
 80015a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	2bff      	cmp	r3, #255	; 0xff
 80015ac:	d802      	bhi.n	80015b4 <HAL_GPIO_Init+0x14c>
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	e002      	b.n	80015ba <HAL_GPIO_Init+0x152>
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	3b08      	subs	r3, #8
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	210f      	movs	r1, #15
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	fa01 f303 	lsl.w	r3, r1, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	401a      	ands	r2, r3
 80015cc:	6a39      	ldr	r1, [r7, #32]
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	fa01 f303 	lsl.w	r3, r1, r3
 80015d4:	431a      	orrs	r2, r3
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 8090 	beq.w	8001708 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015e8:	4b56      	ldr	r3, [pc, #344]	; (8001744 <HAL_GPIO_Init+0x2dc>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	4a55      	ldr	r2, [pc, #340]	; (8001744 <HAL_GPIO_Init+0x2dc>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6193      	str	r3, [r2, #24]
 80015f4:	4b53      	ldr	r3, [pc, #332]	; (8001744 <HAL_GPIO_Init+0x2dc>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001600:	4a51      	ldr	r2, [pc, #324]	; (8001748 <HAL_GPIO_Init+0x2e0>)
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	089b      	lsrs	r3, r3, #2
 8001606:	3302      	adds	r3, #2
 8001608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	220f      	movs	r2, #15
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	4013      	ands	r3, r2
 8001622:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a49      	ldr	r2, [pc, #292]	; (800174c <HAL_GPIO_Init+0x2e4>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d00d      	beq.n	8001648 <HAL_GPIO_Init+0x1e0>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a48      	ldr	r2, [pc, #288]	; (8001750 <HAL_GPIO_Init+0x2e8>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d007      	beq.n	8001644 <HAL_GPIO_Init+0x1dc>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a47      	ldr	r2, [pc, #284]	; (8001754 <HAL_GPIO_Init+0x2ec>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d101      	bne.n	8001640 <HAL_GPIO_Init+0x1d8>
 800163c:	2302      	movs	r3, #2
 800163e:	e004      	b.n	800164a <HAL_GPIO_Init+0x1e2>
 8001640:	2303      	movs	r3, #3
 8001642:	e002      	b.n	800164a <HAL_GPIO_Init+0x1e2>
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <HAL_GPIO_Init+0x1e2>
 8001648:	2300      	movs	r3, #0
 800164a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800164c:	f002 0203 	and.w	r2, r2, #3
 8001650:	0092      	lsls	r2, r2, #2
 8001652:	4093      	lsls	r3, r2
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	4313      	orrs	r3, r2
 8001658:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800165a:	493b      	ldr	r1, [pc, #236]	; (8001748 <HAL_GPIO_Init+0x2e0>)
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	089b      	lsrs	r3, r3, #2
 8001660:	3302      	adds	r3, #2
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d006      	beq.n	8001682 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001674:	4b38      	ldr	r3, [pc, #224]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	4937      	ldr	r1, [pc, #220]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	4313      	orrs	r3, r2
 800167e:	608b      	str	r3, [r1, #8]
 8001680:	e006      	b.n	8001690 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001682:	4b35      	ldr	r3, [pc, #212]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	43db      	mvns	r3, r3
 800168a:	4933      	ldr	r1, [pc, #204]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 800168c:	4013      	ands	r3, r2
 800168e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d006      	beq.n	80016aa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800169c:	4b2e      	ldr	r3, [pc, #184]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 800169e:	68da      	ldr	r2, [r3, #12]
 80016a0:	492d      	ldr	r1, [pc, #180]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	60cb      	str	r3, [r1, #12]
 80016a8:	e006      	b.n	80016b8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016aa:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 80016ac:	68da      	ldr	r2, [r3, #12]
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	4929      	ldr	r1, [pc, #164]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d006      	beq.n	80016d2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016c4:	4b24      	ldr	r3, [pc, #144]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	4923      	ldr	r1, [pc, #140]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
 80016d0:	e006      	b.n	80016e0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016d2:	4b21      	ldr	r3, [pc, #132]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	43db      	mvns	r3, r3
 80016da:	491f      	ldr	r1, [pc, #124]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 80016dc:	4013      	ands	r3, r2
 80016de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d006      	beq.n	80016fa <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016ec:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4919      	ldr	r1, [pc, #100]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	600b      	str	r3, [r1, #0]
 80016f8:	e006      	b.n	8001708 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016fa:	4b17      	ldr	r3, [pc, #92]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	43db      	mvns	r3, r3
 8001702:	4915      	ldr	r1, [pc, #84]	; (8001758 <HAL_GPIO_Init+0x2f0>)
 8001704:	4013      	ands	r3, r2
 8001706:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	3301      	adds	r3, #1
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	fa22 f303 	lsr.w	r3, r2, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	f47f aeaf 	bne.w	800147c <HAL_GPIO_Init+0x14>
  }
}
 800171e:	bf00      	nop
 8001720:	bf00      	nop
 8001722:	372c      	adds	r7, #44	; 0x2c
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	10320000 	.word	0x10320000
 8001730:	10310000 	.word	0x10310000
 8001734:	10220000 	.word	0x10220000
 8001738:	10210000 	.word	0x10210000
 800173c:	10120000 	.word	0x10120000
 8001740:	10110000 	.word	0x10110000
 8001744:	40021000 	.word	0x40021000
 8001748:	40010000 	.word	0x40010000
 800174c:	40010800 	.word	0x40010800
 8001750:	40010c00 	.word	0x40010c00
 8001754:	40011000 	.word	0x40011000
 8001758:	40010400 	.word	0x40010400

0800175c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	887b      	ldrh	r3, [r7, #2]
 800176e:	4013      	ands	r3, r2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d002      	beq.n	800177a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001774:	2301      	movs	r3, #1
 8001776:	73fb      	strb	r3, [r7, #15]
 8001778:	e001      	b.n	800177e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800177a:	2300      	movs	r3, #0
 800177c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr

0800178a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	460b      	mov	r3, r1
 8001794:	807b      	strh	r3, [r7, #2]
 8001796:	4613      	mov	r3, r2
 8001798:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800179a:	787b      	ldrb	r3, [r7, #1]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017a0:	887a      	ldrh	r2, [r7, #2]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017a6:	e003      	b.n	80017b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017a8:	887b      	ldrh	r3, [r7, #2]
 80017aa:	041a      	lsls	r2, r3, #16
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	611a      	str	r2, [r3, #16]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr

080017ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b085      	sub	sp, #20
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
 80017c2:	460b      	mov	r3, r1
 80017c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017cc:	887a      	ldrh	r2, [r7, #2]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4013      	ands	r3, r2
 80017d2:	041a      	lsls	r2, r3, #16
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	43d9      	mvns	r1, r3
 80017d8:	887b      	ldrh	r3, [r7, #2]
 80017da:	400b      	ands	r3, r1
 80017dc:	431a      	orrs	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	611a      	str	r2, [r3, #16]
}
 80017e2:	bf00      	nop
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr

080017ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e26c      	b.n	8001cd8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 8087 	beq.w	800191a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800180c:	4b92      	ldr	r3, [pc, #584]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 030c 	and.w	r3, r3, #12
 8001814:	2b04      	cmp	r3, #4
 8001816:	d00c      	beq.n	8001832 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001818:	4b8f      	ldr	r3, [pc, #572]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 030c 	and.w	r3, r3, #12
 8001820:	2b08      	cmp	r3, #8
 8001822:	d112      	bne.n	800184a <HAL_RCC_OscConfig+0x5e>
 8001824:	4b8c      	ldr	r3, [pc, #560]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800182c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001830:	d10b      	bne.n	800184a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001832:	4b89      	ldr	r3, [pc, #548]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d06c      	beq.n	8001918 <HAL_RCC_OscConfig+0x12c>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d168      	bne.n	8001918 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e246      	b.n	8001cd8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001852:	d106      	bne.n	8001862 <HAL_RCC_OscConfig+0x76>
 8001854:	4b80      	ldr	r3, [pc, #512]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a7f      	ldr	r2, [pc, #508]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 800185a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	e02e      	b.n	80018c0 <HAL_RCC_OscConfig+0xd4>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10c      	bne.n	8001884 <HAL_RCC_OscConfig+0x98>
 800186a:	4b7b      	ldr	r3, [pc, #492]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a7a      	ldr	r2, [pc, #488]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 8001870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	4b78      	ldr	r3, [pc, #480]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a77      	ldr	r2, [pc, #476]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 800187c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	e01d      	b.n	80018c0 <HAL_RCC_OscConfig+0xd4>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800188c:	d10c      	bne.n	80018a8 <HAL_RCC_OscConfig+0xbc>
 800188e:	4b72      	ldr	r3, [pc, #456]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a71      	ldr	r2, [pc, #452]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 8001894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	4b6f      	ldr	r3, [pc, #444]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a6e      	ldr	r2, [pc, #440]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	e00b      	b.n	80018c0 <HAL_RCC_OscConfig+0xd4>
 80018a8:	4b6b      	ldr	r3, [pc, #428]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a6a      	ldr	r2, [pc, #424]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 80018ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	4b68      	ldr	r3, [pc, #416]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a67      	ldr	r2, [pc, #412]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 80018ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d013      	beq.n	80018f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7ff fcb6 	bl	8001238 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d0:	f7ff fcb2 	bl	8001238 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b64      	cmp	r3, #100	; 0x64
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e1fa      	b.n	8001cd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e2:	4b5d      	ldr	r3, [pc, #372]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0f0      	beq.n	80018d0 <HAL_RCC_OscConfig+0xe4>
 80018ee:	e014      	b.n	800191a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7ff fca2 	bl	8001238 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f8:	f7ff fc9e 	bl	8001238 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b64      	cmp	r3, #100	; 0x64
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e1e6      	b.n	8001cd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190a:	4b53      	ldr	r3, [pc, #332]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x10c>
 8001916:	e000      	b.n	800191a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d063      	beq.n	80019ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001926:	4b4c      	ldr	r3, [pc, #304]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f003 030c 	and.w	r3, r3, #12
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00b      	beq.n	800194a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001932:	4b49      	ldr	r3, [pc, #292]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	2b08      	cmp	r3, #8
 800193c:	d11c      	bne.n	8001978 <HAL_RCC_OscConfig+0x18c>
 800193e:	4b46      	ldr	r3, [pc, #280]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d116      	bne.n	8001978 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194a:	4b43      	ldr	r3, [pc, #268]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d005      	beq.n	8001962 <HAL_RCC_OscConfig+0x176>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d001      	beq.n	8001962 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e1ba      	b.n	8001cd8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001962:	4b3d      	ldr	r3, [pc, #244]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	4939      	ldr	r1, [pc, #228]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001976:	e03a      	b.n	80019ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d020      	beq.n	80019c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001980:	4b36      	ldr	r3, [pc, #216]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 8001982:	2201      	movs	r2, #1
 8001984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001986:	f7ff fc57 	bl	8001238 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800198e:	f7ff fc53 	bl	8001238 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e19b      	b.n	8001cd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a0:	4b2d      	ldr	r3, [pc, #180]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f0      	beq.n	800198e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ac:	4b2a      	ldr	r3, [pc, #168]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	4927      	ldr	r1, [pc, #156]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	600b      	str	r3, [r1, #0]
 80019c0:	e015      	b.n	80019ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019c2:	4b26      	ldr	r3, [pc, #152]	; (8001a5c <HAL_RCC_OscConfig+0x270>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7ff fc36 	bl	8001238 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d0:	f7ff fc32 	bl	8001238 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e17a      	b.n	8001cd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e2:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d03a      	beq.n	8001a70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d019      	beq.n	8001a36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a02:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a08:	f7ff fc16 	bl	8001238 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a10:	f7ff fc12 	bl	8001238 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e15a      	b.n	8001cd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a22:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0f0      	beq.n	8001a10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a2e:	2001      	movs	r0, #1
 8001a30:	f000 fa9a 	bl	8001f68 <RCC_Delay>
 8001a34:	e01c      	b.n	8001a70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a36:	4b0a      	ldr	r3, [pc, #40]	; (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3c:	f7ff fbfc 	bl	8001238 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a42:	e00f      	b.n	8001a64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a44:	f7ff fbf8 	bl	8001238 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d908      	bls.n	8001a64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e140      	b.n	8001cd8 <HAL_RCC_OscConfig+0x4ec>
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	42420000 	.word	0x42420000
 8001a60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a64:	4b9e      	ldr	r3, [pc, #632]	; (8001ce0 <HAL_RCC_OscConfig+0x4f4>)
 8001a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1e9      	bne.n	8001a44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 80a6 	beq.w	8001bca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a82:	4b97      	ldr	r3, [pc, #604]	; (8001ce0 <HAL_RCC_OscConfig+0x4f4>)
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10d      	bne.n	8001aaa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a8e:	4b94      	ldr	r3, [pc, #592]	; (8001ce0 <HAL_RCC_OscConfig+0x4f4>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	4a93      	ldr	r2, [pc, #588]	; (8001ce0 <HAL_RCC_OscConfig+0x4f4>)
 8001a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a98:	61d3      	str	r3, [r2, #28]
 8001a9a:	4b91      	ldr	r3, [pc, #580]	; (8001ce0 <HAL_RCC_OscConfig+0x4f4>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aaa:	4b8e      	ldr	r3, [pc, #568]	; (8001ce4 <HAL_RCC_OscConfig+0x4f8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d118      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ab6:	4b8b      	ldr	r3, [pc, #556]	; (8001ce4 <HAL_RCC_OscConfig+0x4f8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a8a      	ldr	r2, [pc, #552]	; (8001ce4 <HAL_RCC_OscConfig+0x4f8>)
 8001abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac2:	f7ff fbb9 	bl	8001238 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aca:	f7ff fbb5 	bl	8001238 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b64      	cmp	r3, #100	; 0x64
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e0fd      	b.n	8001cd8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001adc:	4b81      	ldr	r3, [pc, #516]	; (8001ce4 <HAL_RCC_OscConfig+0x4f8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d106      	bne.n	8001afe <HAL_RCC_OscConfig+0x312>
 8001af0:	4b7b      	ldr	r3, [pc, #492]	; (8001ce0 <HAL_RCC_OscConfig+0x4f4>)
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	4a7a      	ldr	r2, [pc, #488]	; (8001ce0 <HAL_RCC_OscConfig+0x4f4>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6213      	str	r3, [r2, #32]
 8001afc:	e02d      	b.n	8001b5a <HAL_RCC_OscConfig+0x36e>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10c      	bne.n	8001b20 <HAL_RCC_OscConfig+0x334>
 8001b06:	4b76      	ldr	r3, [pc, #472]	; (8001ce0 <HAL_RCC_OscConfig+0x4f4>)
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	4a75      	ldr	r2, [pc, #468]	; (8001ce0 <HAL_RCC_OscConfig+0x4f4>)
 8001b0c:	f023 0301 	bic.w	r3, r3, #1
 8001b10:	6213      	str	r3, [r2, #32]
 8001b12:	4b73      	ldr	r3, [pc, #460]	; (8001ce0 <HAL_RCC_OscConfig+0x4f4>)
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	4a72      	ldr	r2, [pc, #456]	; (8001ce0 <HAL_RCC_OscConfig+0x4f4>)
 8001b18:	f023 0304 	bic.w	r3, r3, #4
 8001b1c:	6213      	str	r3, [r2, #32]
 8001b1e:	e01c      	b.n	8001b5a <HAL_RCC_OscConfig+0x36e>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	2b05      	cmp	r3, #5
 8001b26:	d10c      	bne.n	8001b42 <HAL_RCC_OscConfig+0x356>
 8001b28:	4b6d      	ldr	r3, [pc, #436]	; (8001ce0 <HAL_RCC_OscConfig+0x4f4>)
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	4a6c      	ldr	r2, [pc, #432]	; (8001ce0 <HAL_RCC_OscConfig+0x4f4>)
 8001b2e:	f043 0304 	orr.w	r3, r3, #4
 8001b32:	6213      	str	r3, [r2, #32]
 8001b34:	4b6a      	ldr	r3, [pc, #424]	; (8001ce0 <HAL_RCC_OscConfig+0x4f4>)
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	4a69      	ldr	r2, [pc, #420]	; (8001ce0 <HAL_RCC_OscConfig+0x4f4>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6213      	str	r3, [r2, #32]
 8001b40:	e00b      	b.n	8001b5a <HAL_RCC_OscConfig+0x36e>
 8001b42:	4b67      	ldr	r3, [pc, #412]	; (8001ce0 <HAL_RCC_OscConfig+0x4f4>)
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	4a66      	ldr	r2, [pc, #408]	; (8001ce0 <HAL_RCC_OscConfig+0x4f4>)
 8001b48:	f023 0301 	bic.w	r3, r3, #1
 8001b4c:	6213      	str	r3, [r2, #32]
 8001b4e:	4b64      	ldr	r3, [pc, #400]	; (8001ce0 <HAL_RCC_OscConfig+0x4f4>)
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	4a63      	ldr	r2, [pc, #396]	; (8001ce0 <HAL_RCC_OscConfig+0x4f4>)
 8001b54:	f023 0304 	bic.w	r3, r3, #4
 8001b58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d015      	beq.n	8001b8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b62:	f7ff fb69 	bl	8001238 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b68:	e00a      	b.n	8001b80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6a:	f7ff fb65 	bl	8001238 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e0ab      	b.n	8001cd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b80:	4b57      	ldr	r3, [pc, #348]	; (8001ce0 <HAL_RCC_OscConfig+0x4f4>)
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0ee      	beq.n	8001b6a <HAL_RCC_OscConfig+0x37e>
 8001b8c:	e014      	b.n	8001bb8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8e:	f7ff fb53 	bl	8001238 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b94:	e00a      	b.n	8001bac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b96:	f7ff fb4f 	bl	8001238 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e095      	b.n	8001cd8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bac:	4b4c      	ldr	r3, [pc, #304]	; (8001ce0 <HAL_RCC_OscConfig+0x4f4>)
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1ee      	bne.n	8001b96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bb8:	7dfb      	ldrb	r3, [r7, #23]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d105      	bne.n	8001bca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bbe:	4b48      	ldr	r3, [pc, #288]	; (8001ce0 <HAL_RCC_OscConfig+0x4f4>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	4a47      	ldr	r2, [pc, #284]	; (8001ce0 <HAL_RCC_OscConfig+0x4f4>)
 8001bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 8081 	beq.w	8001cd6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bd4:	4b42      	ldr	r3, [pc, #264]	; (8001ce0 <HAL_RCC_OscConfig+0x4f4>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 030c 	and.w	r3, r3, #12
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d061      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d146      	bne.n	8001c76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be8:	4b3f      	ldr	r3, [pc, #252]	; (8001ce8 <HAL_RCC_OscConfig+0x4fc>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bee:	f7ff fb23 	bl	8001238 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf6:	f7ff fb1f 	bl	8001238 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e067      	b.n	8001cd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c08:	4b35      	ldr	r3, [pc, #212]	; (8001ce0 <HAL_RCC_OscConfig+0x4f4>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1f0      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c1c:	d108      	bne.n	8001c30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c1e:	4b30      	ldr	r3, [pc, #192]	; (8001ce0 <HAL_RCC_OscConfig+0x4f4>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	492d      	ldr	r1, [pc, #180]	; (8001ce0 <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c30:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <HAL_RCC_OscConfig+0x4f4>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a19      	ldr	r1, [r3, #32]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c40:	430b      	orrs	r3, r1
 8001c42:	4927      	ldr	r1, [pc, #156]	; (8001ce0 <HAL_RCC_OscConfig+0x4f4>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c48:	4b27      	ldr	r3, [pc, #156]	; (8001ce8 <HAL_RCC_OscConfig+0x4fc>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4e:	f7ff faf3 	bl	8001238 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c56:	f7ff faef 	bl	8001238 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e037      	b.n	8001cd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c68:	4b1d      	ldr	r3, [pc, #116]	; (8001ce0 <HAL_RCC_OscConfig+0x4f4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x46a>
 8001c74:	e02f      	b.n	8001cd6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c76:	4b1c      	ldr	r3, [pc, #112]	; (8001ce8 <HAL_RCC_OscConfig+0x4fc>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7c:	f7ff fadc 	bl	8001238 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c84:	f7ff fad8 	bl	8001238 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e020      	b.n	8001cd8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c96:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <HAL_RCC_OscConfig+0x4f4>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f0      	bne.n	8001c84 <HAL_RCC_OscConfig+0x498>
 8001ca2:	e018      	b.n	8001cd6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d101      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e013      	b.n	8001cd8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <HAL_RCC_OscConfig+0x4f4>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d106      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d001      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	40007000 	.word	0x40007000
 8001ce8:	42420060 	.word	0x42420060

08001cec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e0d0      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d00:	4b6a      	ldr	r3, [pc, #424]	; (8001eac <HAL_RCC_ClockConfig+0x1c0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d910      	bls.n	8001d30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0e:	4b67      	ldr	r3, [pc, #412]	; (8001eac <HAL_RCC_ClockConfig+0x1c0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f023 0207 	bic.w	r2, r3, #7
 8001d16:	4965      	ldr	r1, [pc, #404]	; (8001eac <HAL_RCC_ClockConfig+0x1c0>)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1e:	4b63      	ldr	r3, [pc, #396]	; (8001eac <HAL_RCC_ClockConfig+0x1c0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d001      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e0b8      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d020      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d48:	4b59      	ldr	r3, [pc, #356]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	4a58      	ldr	r2, [pc, #352]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0308 	and.w	r3, r3, #8
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d005      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d60:	4b53      	ldr	r3, [pc, #332]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	4a52      	ldr	r2, [pc, #328]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d6c:	4b50      	ldr	r3, [pc, #320]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	494d      	ldr	r1, [pc, #308]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d040      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d107      	bne.n	8001da2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d92:	4b47      	ldr	r3, [pc, #284]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d115      	bne.n	8001dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e07f      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d107      	bne.n	8001dba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001daa:	4b41      	ldr	r3, [pc, #260]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d109      	bne.n	8001dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e073      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dba:	4b3d      	ldr	r3, [pc, #244]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e06b      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dca:	4b39      	ldr	r3, [pc, #228]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f023 0203 	bic.w	r2, r3, #3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	4936      	ldr	r1, [pc, #216]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ddc:	f7ff fa2c 	bl	8001238 <HAL_GetTick>
 8001de0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de2:	e00a      	b.n	8001dfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de4:	f7ff fa28 	bl	8001238 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e053      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfa:	4b2d      	ldr	r3, [pc, #180]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 020c 	and.w	r2, r3, #12
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d1eb      	bne.n	8001de4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e0c:	4b27      	ldr	r3, [pc, #156]	; (8001eac <HAL_RCC_ClockConfig+0x1c0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d210      	bcs.n	8001e3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1a:	4b24      	ldr	r3, [pc, #144]	; (8001eac <HAL_RCC_ClockConfig+0x1c0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f023 0207 	bic.w	r2, r3, #7
 8001e22:	4922      	ldr	r1, [pc, #136]	; (8001eac <HAL_RCC_ClockConfig+0x1c0>)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2a:	4b20      	ldr	r3, [pc, #128]	; (8001eac <HAL_RCC_ClockConfig+0x1c0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d001      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e032      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d008      	beq.n	8001e5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e48:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	4916      	ldr	r1, [pc, #88]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d009      	beq.n	8001e7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e66:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	490e      	ldr	r1, [pc, #56]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e7a:	f000 f821 	bl	8001ec0 <HAL_RCC_GetSysClockFreq>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	091b      	lsrs	r3, r3, #4
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	490a      	ldr	r1, [pc, #40]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e8c:	5ccb      	ldrb	r3, [r1, r3]
 8001e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e92:	4a09      	ldr	r2, [pc, #36]	; (8001eb8 <HAL_RCC_ClockConfig+0x1cc>)
 8001e94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e96:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <HAL_RCC_ClockConfig+0x1d0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff f98a 	bl	80011b4 <HAL_InitTick>

  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40022000 	.word	0x40022000
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	080027e4 	.word	0x080027e4
 8001eb8:	2000004c 	.word	0x2000004c
 8001ebc:	20000050 	.word	0x20000050

08001ec0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b087      	sub	sp, #28
 8001ec4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001eda:	4b1e      	ldr	r3, [pc, #120]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x94>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	d002      	beq.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x30>
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d003      	beq.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x36>
 8001eee:	e027      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ef0:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ef2:	613b      	str	r3, [r7, #16]
      break;
 8001ef4:	e027      	b.n	8001f46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	0c9b      	lsrs	r3, r3, #18
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	4a17      	ldr	r2, [pc, #92]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f00:	5cd3      	ldrb	r3, [r2, r3]
 8001f02:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d010      	beq.n	8001f30 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f0e:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	0c5b      	lsrs	r3, r3, #17
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	4a11      	ldr	r2, [pc, #68]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f1a:	5cd3      	ldrb	r3, [r2, r3]
 8001f1c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a0d      	ldr	r2, [pc, #52]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f22:	fb02 f203 	mul.w	r2, r2, r3
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	e004      	b.n	8001f3a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a0c      	ldr	r2, [pc, #48]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f34:	fb02 f303 	mul.w	r3, r2, r3
 8001f38:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	613b      	str	r3, [r7, #16]
      break;
 8001f3e:	e002      	b.n	8001f46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f42:	613b      	str	r3, [r7, #16]
      break;
 8001f44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f46:	693b      	ldr	r3, [r7, #16]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	371c      	adds	r7, #28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000
 8001f58:	007a1200 	.word	0x007a1200
 8001f5c:	080027f4 	.word	0x080027f4
 8001f60:	08002804 	.word	0x08002804
 8001f64:	003d0900 	.word	0x003d0900

08001f68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f70:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <RCC_Delay+0x34>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <RCC_Delay+0x38>)
 8001f76:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7a:	0a5b      	lsrs	r3, r3, #9
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	fb02 f303 	mul.w	r3, r2, r3
 8001f82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f84:	bf00      	nop
  }
  while (Delay --);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	1e5a      	subs	r2, r3, #1
 8001f8a:	60fa      	str	r2, [r7, #12]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1f9      	bne.n	8001f84 <RCC_Delay+0x1c>
}
 8001f90:	bf00      	nop
 8001f92:	bf00      	nop
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr
 8001f9c:	2000004c 	.word	0x2000004c
 8001fa0:	10624dd3 	.word	0x10624dd3

08001fa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e041      	b.n	800203a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d106      	bne.n	8001fd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff f81a 	bl	8001004 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3304      	adds	r3, #4
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	f000 fa6e 	bl	80024c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b01      	cmp	r3, #1
 8002056:	d001      	beq.n	800205c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e035      	b.n	80020c8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2202      	movs	r2, #2
 8002060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0201 	orr.w	r2, r2, #1
 8002072:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a16      	ldr	r2, [pc, #88]	; (80020d4 <HAL_TIM_Base_Start_IT+0x90>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d009      	beq.n	8002092 <HAL_TIM_Base_Start_IT+0x4e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002086:	d004      	beq.n	8002092 <HAL_TIM_Base_Start_IT+0x4e>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a12      	ldr	r2, [pc, #72]	; (80020d8 <HAL_TIM_Base_Start_IT+0x94>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d111      	bne.n	80020b6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2b06      	cmp	r3, #6
 80020a2:	d010      	beq.n	80020c6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0201 	orr.w	r2, r2, #1
 80020b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020b4:	e007      	b.n	80020c6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f042 0201 	orr.w	r2, r2, #1
 80020c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40012c00 	.word	0x40012c00
 80020d8:	40000400 	.word	0x40000400

080020dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d122      	bne.n	8002138 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d11b      	bne.n	8002138 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0202 	mvn.w	r2, #2
 8002108:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f9b4 	bl	800248c <HAL_TIM_IC_CaptureCallback>
 8002124:	e005      	b.n	8002132 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f9a7 	bl	800247a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f9b6 	bl	800249e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	2b04      	cmp	r3, #4
 8002144:	d122      	bne.n	800218c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b04      	cmp	r3, #4
 8002152:	d11b      	bne.n	800218c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0204 	mvn.w	r2, #4
 800215c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2202      	movs	r2, #2
 8002162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f98a 	bl	800248c <HAL_TIM_IC_CaptureCallback>
 8002178:	e005      	b.n	8002186 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f97d 	bl	800247a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f98c 	bl	800249e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b08      	cmp	r3, #8
 8002198:	d122      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d11b      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0208 	mvn.w	r2, #8
 80021b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2204      	movs	r2, #4
 80021b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f960 	bl	800248c <HAL_TIM_IC_CaptureCallback>
 80021cc:	e005      	b.n	80021da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f953 	bl	800247a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f962 	bl	800249e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f003 0310 	and.w	r3, r3, #16
 80021ea:	2b10      	cmp	r3, #16
 80021ec:	d122      	bne.n	8002234 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	2b10      	cmp	r3, #16
 80021fa:	d11b      	bne.n	8002234 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f06f 0210 	mvn.w	r2, #16
 8002204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2208      	movs	r2, #8
 800220a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f936 	bl	800248c <HAL_TIM_IC_CaptureCallback>
 8002220:	e005      	b.n	800222e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f929 	bl	800247a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f938 	bl	800249e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b01      	cmp	r3, #1
 8002240:	d10e      	bne.n	8002260 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b01      	cmp	r3, #1
 800224e:	d107      	bne.n	8002260 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f06f 0201 	mvn.w	r2, #1
 8002258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7fe fe7e 	bl	8000f5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800226a:	2b80      	cmp	r3, #128	; 0x80
 800226c:	d10e      	bne.n	800228c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002278:	2b80      	cmp	r3, #128	; 0x80
 800227a:	d107      	bne.n	800228c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 fa6b 	bl	8002762 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002296:	2b40      	cmp	r3, #64	; 0x40
 8002298:	d10e      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a4:	2b40      	cmp	r3, #64	; 0x40
 80022a6:	d107      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f8fc 	bl	80024b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	f003 0320 	and.w	r3, r3, #32
 80022c2:	2b20      	cmp	r3, #32
 80022c4:	d10e      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	2b20      	cmp	r3, #32
 80022d2:	d107      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f06f 0220 	mvn.w	r2, #32
 80022dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 fa36 	bl	8002750 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022e4:	bf00      	nop
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_TIM_ConfigClockSource+0x1c>
 8002304:	2302      	movs	r3, #2
 8002306:	e0b4      	b.n	8002472 <HAL_TIM_ConfigClockSource+0x186>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2202      	movs	r2, #2
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002326:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800232e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002340:	d03e      	beq.n	80023c0 <HAL_TIM_ConfigClockSource+0xd4>
 8002342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002346:	f200 8087 	bhi.w	8002458 <HAL_TIM_ConfigClockSource+0x16c>
 800234a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800234e:	f000 8086 	beq.w	800245e <HAL_TIM_ConfigClockSource+0x172>
 8002352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002356:	d87f      	bhi.n	8002458 <HAL_TIM_ConfigClockSource+0x16c>
 8002358:	2b70      	cmp	r3, #112	; 0x70
 800235a:	d01a      	beq.n	8002392 <HAL_TIM_ConfigClockSource+0xa6>
 800235c:	2b70      	cmp	r3, #112	; 0x70
 800235e:	d87b      	bhi.n	8002458 <HAL_TIM_ConfigClockSource+0x16c>
 8002360:	2b60      	cmp	r3, #96	; 0x60
 8002362:	d050      	beq.n	8002406 <HAL_TIM_ConfigClockSource+0x11a>
 8002364:	2b60      	cmp	r3, #96	; 0x60
 8002366:	d877      	bhi.n	8002458 <HAL_TIM_ConfigClockSource+0x16c>
 8002368:	2b50      	cmp	r3, #80	; 0x50
 800236a:	d03c      	beq.n	80023e6 <HAL_TIM_ConfigClockSource+0xfa>
 800236c:	2b50      	cmp	r3, #80	; 0x50
 800236e:	d873      	bhi.n	8002458 <HAL_TIM_ConfigClockSource+0x16c>
 8002370:	2b40      	cmp	r3, #64	; 0x40
 8002372:	d058      	beq.n	8002426 <HAL_TIM_ConfigClockSource+0x13a>
 8002374:	2b40      	cmp	r3, #64	; 0x40
 8002376:	d86f      	bhi.n	8002458 <HAL_TIM_ConfigClockSource+0x16c>
 8002378:	2b30      	cmp	r3, #48	; 0x30
 800237a:	d064      	beq.n	8002446 <HAL_TIM_ConfigClockSource+0x15a>
 800237c:	2b30      	cmp	r3, #48	; 0x30
 800237e:	d86b      	bhi.n	8002458 <HAL_TIM_ConfigClockSource+0x16c>
 8002380:	2b20      	cmp	r3, #32
 8002382:	d060      	beq.n	8002446 <HAL_TIM_ConfigClockSource+0x15a>
 8002384:	2b20      	cmp	r3, #32
 8002386:	d867      	bhi.n	8002458 <HAL_TIM_ConfigClockSource+0x16c>
 8002388:	2b00      	cmp	r3, #0
 800238a:	d05c      	beq.n	8002446 <HAL_TIM_ConfigClockSource+0x15a>
 800238c:	2b10      	cmp	r3, #16
 800238e:	d05a      	beq.n	8002446 <HAL_TIM_ConfigClockSource+0x15a>
 8002390:	e062      	b.n	8002458 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	6899      	ldr	r1, [r3, #8]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f000 f95e 	bl	8002662 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	609a      	str	r2, [r3, #8]
      break;
 80023be:	e04f      	b.n	8002460 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	6899      	ldr	r1, [r3, #8]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f000 f947 	bl	8002662 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023e2:	609a      	str	r2, [r3, #8]
      break;
 80023e4:	e03c      	b.n	8002460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6818      	ldr	r0, [r3, #0]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	6859      	ldr	r1, [r3, #4]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	461a      	mov	r2, r3
 80023f4:	f000 f8be 	bl	8002574 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2150      	movs	r1, #80	; 0x50
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 f915 	bl	800262e <TIM_ITRx_SetConfig>
      break;
 8002404:	e02c      	b.n	8002460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	6859      	ldr	r1, [r3, #4]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	461a      	mov	r2, r3
 8002414:	f000 f8dc 	bl	80025d0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2160      	movs	r1, #96	; 0x60
 800241e:	4618      	mov	r0, r3
 8002420:	f000 f905 	bl	800262e <TIM_ITRx_SetConfig>
      break;
 8002424:	e01c      	b.n	8002460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	6859      	ldr	r1, [r3, #4]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	461a      	mov	r2, r3
 8002434:	f000 f89e 	bl	8002574 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2140      	movs	r1, #64	; 0x40
 800243e:	4618      	mov	r0, r3
 8002440:	f000 f8f5 	bl	800262e <TIM_ITRx_SetConfig>
      break;
 8002444:	e00c      	b.n	8002460 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4619      	mov	r1, r3
 8002450:	4610      	mov	r0, r2
 8002452:	f000 f8ec 	bl	800262e <TIM_ITRx_SetConfig>
      break;
 8002456:	e003      	b.n	8002460 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	73fb      	strb	r3, [r7, #15]
      break;
 800245c:	e000      	b.n	8002460 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800245e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002470:	7bfb      	ldrb	r3, [r7, #15]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr

0800248c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr

0800249e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr

080024b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr
	...

080024c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a25      	ldr	r2, [pc, #148]	; (800256c <TIM_Base_SetConfig+0xa8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d007      	beq.n	80024ec <TIM_Base_SetConfig+0x28>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e2:	d003      	beq.n	80024ec <TIM_Base_SetConfig+0x28>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a22      	ldr	r2, [pc, #136]	; (8002570 <TIM_Base_SetConfig+0xac>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d108      	bne.n	80024fe <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a1a      	ldr	r2, [pc, #104]	; (800256c <TIM_Base_SetConfig+0xa8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d007      	beq.n	8002516 <TIM_Base_SetConfig+0x52>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800250c:	d003      	beq.n	8002516 <TIM_Base_SetConfig+0x52>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a17      	ldr	r2, [pc, #92]	; (8002570 <TIM_Base_SetConfig+0xac>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d108      	bne.n	8002528 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800251c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	4313      	orrs	r3, r2
 8002526:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	4313      	orrs	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a07      	ldr	r2, [pc, #28]	; (800256c <TIM_Base_SetConfig+0xa8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d103      	bne.n	800255c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	615a      	str	r2, [r3, #20]
}
 8002562:	bf00      	nop
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr
 800256c:	40012c00 	.word	0x40012c00
 8002570:	40000400 	.word	0x40000400

08002574 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002574:	b480      	push	{r7}
 8002576:	b087      	sub	sp, #28
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	f023 0201 	bic.w	r2, r3, #1
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800259e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f023 030a 	bic.w	r3, r3, #10
 80025b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	621a      	str	r2, [r3, #32]
}
 80025c6:	bf00      	nop
 80025c8:	371c      	adds	r7, #28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr

080025d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	f023 0210 	bic.w	r2, r3, #16
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	031b      	lsls	r3, r3, #12
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	4313      	orrs	r3, r2
 8002604:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800260c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	4313      	orrs	r3, r2
 8002616:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	621a      	str	r2, [r3, #32]
}
 8002624:	bf00      	nop
 8002626:	371c      	adds	r7, #28
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr

0800262e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800262e:	b480      	push	{r7}
 8002630:	b085      	sub	sp, #20
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002644:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4313      	orrs	r3, r2
 800264c:	f043 0307 	orr.w	r3, r3, #7
 8002650:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	609a      	str	r2, [r3, #8]
}
 8002658:	bf00      	nop
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr

08002662 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002662:	b480      	push	{r7}
 8002664:	b087      	sub	sp, #28
 8002666:	af00      	add	r7, sp, #0
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	607a      	str	r2, [r7, #4]
 800266e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800267c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	021a      	lsls	r2, r3, #8
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	431a      	orrs	r2, r3
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	4313      	orrs	r3, r2
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	4313      	orrs	r3, r2
 800268e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	609a      	str	r2, [r3, #8]
}
 8002696:	bf00      	nop
 8002698:	371c      	adds	r7, #28
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d101      	bne.n	80026b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026b4:	2302      	movs	r3, #2
 80026b6:	e041      	b.n	800273c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2202      	movs	r2, #2
 80026c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a14      	ldr	r2, [pc, #80]	; (8002748 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d009      	beq.n	8002710 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002704:	d004      	beq.n	8002710 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a10      	ldr	r2, [pc, #64]	; (800274c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d10c      	bne.n	800272a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002716:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	4313      	orrs	r3, r2
 8002720:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	40012c00 	.word	0x40012c00
 800274c:	40000400 	.word	0x40000400

08002750 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr

08002762 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <__libc_init_array>:
 8002774:	b570      	push	{r4, r5, r6, lr}
 8002776:	2600      	movs	r6, #0
 8002778:	4d0c      	ldr	r5, [pc, #48]	; (80027ac <__libc_init_array+0x38>)
 800277a:	4c0d      	ldr	r4, [pc, #52]	; (80027b0 <__libc_init_array+0x3c>)
 800277c:	1b64      	subs	r4, r4, r5
 800277e:	10a4      	asrs	r4, r4, #2
 8002780:	42a6      	cmp	r6, r4
 8002782:	d109      	bne.n	8002798 <__libc_init_array+0x24>
 8002784:	f000 f822 	bl	80027cc <_init>
 8002788:	2600      	movs	r6, #0
 800278a:	4d0a      	ldr	r5, [pc, #40]	; (80027b4 <__libc_init_array+0x40>)
 800278c:	4c0a      	ldr	r4, [pc, #40]	; (80027b8 <__libc_init_array+0x44>)
 800278e:	1b64      	subs	r4, r4, r5
 8002790:	10a4      	asrs	r4, r4, #2
 8002792:	42a6      	cmp	r6, r4
 8002794:	d105      	bne.n	80027a2 <__libc_init_array+0x2e>
 8002796:	bd70      	pop	{r4, r5, r6, pc}
 8002798:	f855 3b04 	ldr.w	r3, [r5], #4
 800279c:	4798      	blx	r3
 800279e:	3601      	adds	r6, #1
 80027a0:	e7ee      	b.n	8002780 <__libc_init_array+0xc>
 80027a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80027a6:	4798      	blx	r3
 80027a8:	3601      	adds	r6, #1
 80027aa:	e7f2      	b.n	8002792 <__libc_init_array+0x1e>
 80027ac:	08002808 	.word	0x08002808
 80027b0:	08002808 	.word	0x08002808
 80027b4:	08002808 	.word	0x08002808
 80027b8:	0800280c 	.word	0x0800280c

080027bc <memset>:
 80027bc:	4603      	mov	r3, r0
 80027be:	4402      	add	r2, r0
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d100      	bne.n	80027c6 <memset+0xa>
 80027c4:	4770      	bx	lr
 80027c6:	f803 1b01 	strb.w	r1, [r3], #1
 80027ca:	e7f9      	b.n	80027c0 <memset+0x4>

080027cc <_init>:
 80027cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ce:	bf00      	nop
 80027d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027d2:	bc08      	pop	{r3}
 80027d4:	469e      	mov	lr, r3
 80027d6:	4770      	bx	lr

080027d8 <_fini>:
 80027d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027da:	bf00      	nop
 80027dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027de:	bc08      	pop	{r3}
 80027e0:	469e      	mov	lr, r3
 80027e2:	4770      	bx	lr
